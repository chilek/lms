LMS - LAN Management System 1.5-cvs

   [logo-small.png]

LMS Developers

   Copyright © 2001-2005 LMS Developers
     _________________________________________________________________

   Table of Contents
   1. Intro

        1.1. About LMS
        1.2. Authors
        1.3. Legal Notice
        1.4. Other Information

   2. Installation and configuration

        2.1. Intro
        2.2. Requirements
        2.3. LMS Installation
        2.4. Database Server Installation
        2.5. Basic Configuration
        2.6. Access rights
        2.7. Upgrade
        2.8. Invoices

   3. A.L.E.C's LMS Daemon

        3.1. Basics
        3.2. Modules

   List of Tables
   3-1. List of almsd daemon modules
     _________________________________________________________________

Chapter 1. Intro

1.1. About LMS

   "LMS" (LAN Management System) is a package of applications in PHP,
   Perl and C for managing LANs with MySQL, PostgreSQL or SQLite
   databases support. The main goal is to get the best service of
   customers at high provider's level. The main features in LMS are:
     * database of customers (name, surname, address, phone numbers,
       commentary and other),
     * database of computers (IP, MAC),
     * easy-ridden financial system and funds of network,
     * financial balances and invoices
     * sending e-mail warnings to users,
     * automatic billing,
     * generating of (almost) any kind of config file (i.e.
       ipchains/iptables based firewall script, dhcp daemon
       configuration, zone file for bind, static arp entries, oident, htb
       and more...)
     * visualization of internet link usage stats,
     * request tracker system (Helpdesk),
     * timetable (organizer).

   All stuff was invented for administration of ASK NetX and there is
   still developed and tested.

   LMS will not replace your administrator's skills. If you can't make so
   simple activity like installation or configuration, probably you'll
   cannot adjust LMS for your system. So, you must have knowledge about
   administration of UNIX systems.
     _________________________________________________________________

1.2. Authors

1.2.1. LMS Developers

     * PHP Code:

       Lukasz 'Baseciq' Mozer
       Michal 'DziQs' Zapalski
       Radoslaw 'Warden' Antoniuk
       Krzysztof 'hunter' Drewicz
       Marcin 'Lexx' Krol
       Aleksander 'A.L.E.C' Machniak
     * C Code:

       Aleksander 'A.L.E.C' Machniak
       Marcin 'Lexx' Krol
     * Perl Code:

       Lukasz 'Baseciq' Mozer
       Michal 'DziQs' Zapalski
       Maciej 'agaran' Pijanka
       Krzysztof 'hunter' Drewicz
     * Design:

       Lukasz 'Baseciq' Mozer
     * HTML, JavaScript, CSS:

       Lukasz 'Baseciq' Mozer
       Pawel 'Bob_R' Czerski
       Pawel 'sickone' Kisiela
     * Images:

       Piotr 'Pierzak' M.
       Grzegorz 'byko' Cichowski
       Kuba 'kflis' Flis
       Lukasz 'Baseciq' Mozer
       Jakub 'Jimmac' Steiner
     * MySQL Support:

       Kuba 'shasta' Jankowski
       Radoslaw 'Warden' Antoniuk
       Przemys³aw Babinski
     * PostgreSQL & SQLite Support:

       Aleksander 'A.L.E.C' Machniak
     * WWW Page & Documentation:

       Aleksander 'A.L.E.C' Machniak
       Kuba 'shasta' Jankowski
       Grzegorz 'JaBBaS' Dziegielewski
       Lukasz 'Baseciq' Mozer
       Marcin 'Lexx' Krol
     * Betatesting:

       Grzegorz 'byko' Cichowski
       Radoslaw 'Warden' Antoniuk
       Tomasz 'dzwonek' Dzwonkowski
       Sebastian 'Victus' Frasunkiewicz
       Kuba 'kflis' Flis
       Krystian 'UFOczek' Kochanowski
       Grzegorz 'JaBBaS' Dziegielewski
       Andrzej 'chsh' Gradziel
     _________________________________________________________________

1.2.2. Others

   LMS uses elements of other software: phpMyAdmin, phpsysinfo,
   NewsPortal, overLIB, Multipart Mime Email Generator Library, ezpdf,
   Tigra Calendar, Piotr Kleban's polish procedures of number-to-words
   conversion and code examples from PHP manual.
     _________________________________________________________________

1.3. Legal Notice

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or (at
   you option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
   USA.

   Text of License is here.
     _________________________________________________________________

1.4. Other Information

1.4.1. Contact

   Preferably via a mailing list, which you can subscribe sending empty
   e-mail with subject "subscribe lms-en" on address
   ecartis@lists.rulez.pl, e-mails are sent on address
   lms-en@lists.rulez.pl.
     _________________________________________________________________

1.4.2. Ideas and Bugs Advertising

   In order to effectively report bugs or new ideas, best is to subscribe
   mailing list where somebody from authors or users will have a chance
   to answer on questions that are worrying you. Also, available is BTS,
   where can be bugs advertised (needed registration). Reports from BTS
   going also to mailing list so best to subscribe, report bug on BTS,
   send link on list and wait for events evolution. Address of BTS is
   http://bts.rulez.pl.
     _________________________________________________________________

1.4.3. Newest version

   Allways, newest version of LMS can be downloaded from CVS repository
   CVS with help of www interface here, or classic (anonymous access,
   empty password):
cvs -d :pserver:cvs@cvs.rulez.pl:/home/cvsroot login
cvs -d :pserver:cvs@cvs.rulez.pl:/home/cvsroot co lms
cvs -d :pserver:cvs@cvs.rulez.pl:/home/cvsroot logout
     _________________________________________________________________

1.4.4. Changelog

   Informations about changes, which was made in all versions of LMS are
   included in file ChangeLog.
     _________________________________________________________________

Chapter 2. Installation and configuration

2.1. Intro

   LMS consist a few modules, body of LMS is LMS-UI (user interface). It
   is in integrity written in PHP and for work require database (in fact
   every module require database). Exactly in LMS-UI we perform all
   actions, the rest of modules is only for automate work of LMS.

   LMS is also set of PERL scripts, and exactly these scripts requires to
   have that language interpreter. If you will want use these scripts,
   you must have PERL. Among others, scripts allow on monthly counting of
   subscription fees, or sending of admonitions. It is also LMS-MGC,
   witch is script too, but so much universal that can generate
   practically any config file and restart service on your server.

   At the end it is also A.L.E.C's LMS Daemon, written in C language,
   which is assigned (in fact his plugins) for configuration files
   generation and services restarting. It can be used as replacement or
   addition of perl scripts. It responds for what has been changed in
   LMS-UI was made also in real.
     _________________________________________________________________

2.2. Requirements

2.2.1. WWW Server

   Because LMS-UI is written in PHP, necessary is WWW server with
   interpreter of that language. Perefered server is Apache
   (www.apache.org).
     _________________________________________________________________

2.2.2. PHP Interpreter

   Interpreter should be in version 4.2.x or higher, but on 4.1.x also
   works fine (but because developers uses 4.2.3 or higher, can't
   guarante correct work with older versions. PHP can be downloaded from
   page www.php.net.
     _________________________________________________________________

2.2.3. Database Server

   LMS will not work correctly with MySQL versions older than 3.23.xx

   LMS also works with PostgreSQL in version 7.3.x or higher.

   Cooperation with SQLite database is possible too, but we are tested
   only version 2.8.11.
     _________________________________________________________________

2.2.4. Smarty Library

   LMS-UI require Smarty library(http://smarty.php.net) in version 2.5.0
   or higher (don't use 2.6.4 version).
     _________________________________________________________________

2.2.5. Perl

   If for LMS-UI will suffice above stuff, for working LMS-MGC and the
   rest of scripts you will need also Perl and modules for him:
     * perl and his basic modules (POSIX, GetOpt::Long);
     * Net::SMTP;
     * Config::IniFiles;
     * DBI;
     * DBD-mysql (if you will use mysql);
     * DBD-pg (if you will use postgres);
     * DBD-SQLite (if you will use SQLite);
     _________________________________________________________________

2.2.6. C Compiler

   If you'll runA.L.E.C's LMS Daemon is needed working C compiler,
   because daemon is providing only in the form of source code.
     _________________________________________________________________

2.3. LMS Installation

   LMS in the form of tar.gz archive can be downloaded from project home
   page (www.lms.rulez.pl), afterd that should be extracted and placed in
   chosen directory (i.e. /var/www/lms ) available for server www:
$ cd /var/www
$ wget http://lms.rulez.pl/download/stable/lms-x.x.x.tar.gz
$ tar zxf lms-x.x.x.tar.gz

   Two kind of LMS packets are available - including Smarty library
   (lms-x.x.x+libs.tar.gz) and without that library. If you haven't got
   package with libraries, you must get and placed them in directory lib.
$ cd /var/www/lms/lib
$ wget http://smarty.php.net/distributions/Smarty-2.6.0.tar.gz
$ tar zxf Smarty-2.6.0.tar.gz
$ mv Smarty-2.6.0/libs Smarty

   Note

   Placement of all directories can be set in section [directories] in
   file lms.ini.

   Files with configuration (sample/lms.ini and sample/lms-mgc.ini) place
   in directory /etc/lms.

   Exec scripts from directory bin is preferably to move to directory
   /usr/sbin.

   Warning

   Server www must have reading rights on file lms.ini and writing rights
   on directory backup. It makes potential drop of system security level.
     _________________________________________________________________

2.4. Database Server Installation

2.4.1. MySQL

2.4.1.1. Intro

   That very popular database is available with majority of Linux
   distributions. If however you must install it independently, begin
   from sources downloading from www.mysql.com.
     _________________________________________________________________

2.4.1.2. MySQL Server Installation

   After extracting, go to directory with MySQL and type sequence of
   commands:
$ ./configure --prefix=/usr/local/mysql
$ make
$ make install
$ /usr/local/mysql/bin/mysql_install_db
$ chown mysql -R /usr/local/mysql/var
$ /usr/local/mysql/bin/safe_mysqld &
$ /usr/local/mysql/bin/mysqladmin -u root password nowe_has³o
     _________________________________________________________________

2.4.1.3. Create Database

   It is necesserily if you run LMS at the FIRST time. If you are
   upgrading LMS from older version, appropriate notes what to do with
   database stands in ChangeLog file. So, go to directory, in which
   you've got LMS and run mysql's shell:
mysql -u[here enter user with full access rights to database] -p
Enter password:[just enter password:)]
mysql> create database lms;
mysql> grant usage on lms.* to lms@localhost;
mysql> grant select,insert,update,delete,create,alter on lms.* to lms@localhost identified by 'haslo';
mysql> flush privileges;
mysql> use lms;
mysql> source doc/lms.mysql;
     _________________________________________________________________

2.4.1.4. LMS Configuration (lms.ini)

   Because MySQL is default database for LMS, configuration is limited
   for setting in section [database] of file /etc/lms/lms.ini password
   and user's name:
user     = lms
password = your_password

   After that, if LMS can establish connection to database server, it is
   possible get to the system without problems. If in database is no such
   administrator account, only thing what you'll see be form of
   administrator addition. When you enter correct admin personal details,
   LMS will move you to login page, where at once you can use newly
   created account.

   Let's stop here, add some stuff to cron, for peace of mind:
12 4 3,10,17,21,28 * * /usr/bin/mysqldump -u lms --password=your-super-secret-password \
              --add-drop-table --add-locks lms > backups/lms-auto-"$(date +%s)".sql

   That will create at 4:12 morning, every 3, 10, 17, 21 and 28 day of
   month automagic mysql database backup.
     _________________________________________________________________

2.4.2. PostgreSQL

2.4.2.1. Intro

   LMS is tested on PostgreSQL 7.3.4 and higher, but because special
   properties of that base are not used, there will be no problem with
   later versions. If you have not instaled PostgreSQL server, best
   solution will be selfhand compilation from sources available on
   www.postgresql.org.
     _________________________________________________________________

2.4.2.2. Installation

   That is a short version of installation procedure, more info can be
   find in postgres documentation. After download and extraction go to
   main directory and run following commands:
$ ./configure --enable-locale
$ gmake
$ su
$ gmake install
$ adduser postgres
$ mkdir /usr/local/pgsql/data
$ chown postgres /usr/local/pgsql/data
$ su - postgres
$ /usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
$ /usr/local/pgsql/bin/postmaster -D /usr/local/pgsql/data >logfile 2>&1 &
     _________________________________________________________________

2.4.2.3. Database Creation

   While server is running you can enter finto creation of database with
   name 'lms', which owner will be user with login 'lms'.
$ /usr/local/pgsql/bin/createuser -d -A -P lms
$ /usr/local/pgsql/bin/createdb -E LATIN2 -U lms lms
$ /usr/local/pgsql/bin/psql -d lms -U lms -f /lms/doc/lms.pgsql
     _________________________________________________________________

2.4.2.4. LMS Configuration (lms.ini)

   For LMS default database server is MySQL, so in section [database] of
   file /etc/lms/lms.ini you must set following options:
type     = postgres
user     = lms
password = password_entered_while_user_lms_account_creation

   Note

   Password's demand depends on configuration of postgres users
   autentication in /usr/local/pgsql/data/pg_hba.conf. By default
   password is not required.

   After that, if LMS connects to database, you can without problems
   enter to the system. If in database will be not administrator's
   account, only thing what you'll see will be form of administrator's
   account addition. When you enter correct data LMS will move you to
   login page, when you can use newly created account.
     _________________________________________________________________

2.4.3. SQLite

2.4.3.1. Intro

   This one-file database is commend for speed. Authors define that it is
   2-3 times faster than MySQL. Furthermore, with properly configuration
   it's possible to load whole database in to the RAM menory, during this
   the efficiency highly increases. Below is short description of
   installation. Sources can be downloaded from: www.sqlite.org.
     _________________________________________________________________

2.4.3.2. Installation

   Here You can see how to install the SQLite libraries and adding this
   service to PHP database (in PHP 5.0 ver. have SQLite built in). After
   unpacking sources go to SQLite directory and type in Commands step by
   step (for example):
$ ./configure
$ make
$ make install
$ ldconfig
$ pear download http://pecl.php.net/get/SQLite-1.0.2.tgz
$ pear install SQLite-1.0.2.tgz

   Next in php.ini set:
extension=sqlite.so

   There is option to compile-in SQLite into PHP : --with-sqlite.
     _________________________________________________________________

2.4.3.3. Database Creation

   It's necessarily when You running LMS FIRST TIME! Go to Yours LMS
   directory and run SQlite shell:
$ sqlite -init doc/lms.sqlite /usr/local/lms/lms.db
sqlite> .exit
$ chown 99.98 /usr/local/lms/lms
     _________________________________________________________________

2.4.3.4. LMS Configuration (lms.ini)

   One of the SQLite limits is no authenticity of users, that's why
   configuration request only setting type and path to the database file.
   In section [database] pliku /etc/lms/lms.ini set:
type     = sqlite
database = /usr/local/lms/lms.db

   Now we can get in to the system. But if in Database is no user
   account, we will see add user account form.
     _________________________________________________________________

2.5. Basic Configuration

   Main configuration file of LMS is lms.ini, which must be placed in
   directory /etc/lms or in root directory of LMS. It contains
   configuration options of LMS-UI and all script with exception of
   LMS-MGC.

   Note

   Remember to remove semicolons from begining of line with seted
   parameter.
     _________________________________________________________________

2.5.1. Section [database] - Database Settings

     * type
       Database type. Actually in 100% supported is 'mysql', but for the
       time being isn't seen problems with 'postgres' and 'sqlite'.
       Default: mysql
       Example: type = mysql
     * host
       Host where database is installed. Most often, localhost, but can
       here set anything (IP, domain, path to socket in format
       'localhost:/path/to/socket'). Default: localhost
       Example: host = localhost
     * user
       Name of database user account. In many cases (if you've go by
       documentation) that will be 'lms'. When you'll want to use
       privileged account, probably you'll enter 'root' (MySQL on most of
       *nixes), 'mysql' (on PLD) or 'postgres' (PostgreSQL). Default:
       mysql
       Example: user = lms
     * password
       Database password. Default: empty.
       Example: password = password
     * database
       Name of database (for SQLite path to database file). Default: lms.
       Example: database = lms
     * server_encoding
       Database encoding. Use if your database encoding is not unicode.
       Postgres is taking up conversion by himself, but in case of mysql
       for conversion is used php/iconv in LMS db-drivers. Default:
       unicode.
       Example: server_encoding = latin2
     _________________________________________________________________

2.5.2. Section [directories] - Directories Settings

     * sys_dir
       System directory. It is a place where is entire content of LMS's
       UI, that means index.php, graphics, templates and the rest. By
       default index.php seek in filesystem using getcwd(), but better is
       to say him where hi is:
       Example: sys_dir = /var/www/htdocs/lms/
     * modules_dir
       Directory with "modules" of LMS. That is content of /modules
       directory. By default it is subdirectory modules in sys_dir.
       Example: modules_dir = /usr/share/lms/modules/
     * lib_dir
       Directory with "libraries" of LMS. That is content of /lib
       directory. By default it is subdirectory lib in sys_dir.
       Example: lib_dir = /usr/share/lms/lib/
     * backup_dir
       Directory for database backup files - place where LMS write
       database snapshots. By default it is subdirectory backups in
       sys_dir.
       Example: backup_dir = /var/backup/lms/

       Warning

   If directory with backups will be accessible from WWW level, then
   anybody will can to access them without authorization.
     * smarty_dir
       Directory with Smarty library - By default, subdirectory Smarty in
       lib_dir.
       Example: smarty_dir = /usr/lib/php/Smarty
     * smarty_compile_dir
       Smarty's compilation directory. Place where Smarty compile
       templates. By default it is subdirectory templates_c in sys_dir.
       Example: smarty_compile_dir = /var/smarty/compile/lms
     * smarty_templates_dir
       Directory with Smarty's templates. By default it is subdirectory
       templates in sys_dir.
       Example: smarty_templates_dir = /usr/share/lms/templates
     _________________________________________________________________

2.5.3. Section [phpui] - Interface Setting

     * allow_from (optional)
       Lis of networks and IP addresses, which have access to LMS. If
       empty, every IP address has access to LMS. When you write here
       list of addresses or address classes, LMS dismiss every unwanted
       user with HTTP 403 error.
       Example: allow_from = 192.168.0.0/16, 213.25.209.224/27,
       213.241.77.29
     * lang
       User interface language symbol. When is not set, language will be
       based on html browser settings. Default: en.
       Example: lang = pl
     * timeout
       Timeout of www session. After that time (in seconds) user will be
       log out if not take some action. Default: 600.
       Example: timeout = 900

       Warning

   There is not possible to set no timeout. If you set this value on
   zero, you'll can't use LMS!
     * customerlist_pagelimit
       Limit of displayed positions on one page on customers list.
       Default: no limit.
       Example: customerlist_pagelimit = 10
     * nodelist_pagelimit
       Limit of displayed records on page on nodes list. Default: no
       limit.
       Example: nodelist_pagelimit = 10
     * balancelist_pagelimit
       Limit of displayed records on page on user's balance. Default:
       100.
       Example: balancelist_pagelimit = 50
     * invoicelist_pagelimit
       Limit of displayed records on page on invoices list. Default: 100
       Example: invoicelist_pagelimit = 50
     * ticketlist_pagelimit
       Limit of displayed records on page on tickets (requests) list.
       Default: 100
       Example: ticketlist_pagelimit = 50
     * networkhosts_pagelimit
       Limit of displayed nodes on one page in Network Information.
       Default: 256
       Example: networkhosts_pagelimit = 1024
     * accountlist_pagelimit
       Limit of displayed records on page on accounts list. Default: 100
       Example: accountlist_pagelimit = 50
     * domainlist_pagelimit
       Limit of displayed records on page on domains list. Default: 100
       Example: domainlist_pagelimit = 50
     * aliaslist_pagelimit
       Limit of displayed records on page on aliases list. Default: 100
       Example: aliaslist_pagelimit = 50
     * configlist_pagelimit
       Limit of displayed records on page on UI config options list.
       Default: 100
       Example: configlist_pagelimit = 50
     * reload_type
       Reload type. Allowed values:
       exec - calling of some command (most often with sudo, some script
       or something else, configurable below)
       sql - doing SQL writes (also can be set concrete query)
       Default: sql.
       Example: reload_type = exec
     * reload_execcmd
       Command to run during reload, if reload_type is set to 'exec'. By
       default /bin/true. That string is send to command system(), so I
       propose consideration what you do and how :) Altogether,
       semicolons should be parsed by bash, but LMS splits that string
       and execute commands singly.
       Example: reload_execcmd = "sudo /usr/bin/reload_lms.sh"
     * reload_sqlquery
       SQL query executed while reload, if reload_type = sql. By default,
       query inserts into table 'timestamps' value '_force'. In query can
       be used '%TIME%' as replacement to current unix timestamp.
       WARNING! Semicolon is handled by a queries separator, that means
       you can enter couple of SQL queries separate them by semicolon
       sign.
       Example: reload_sqlquery = "INSERT INTO reload VALUES
       ('1','%TIME%')"
     * force_ssl
       SSL Enforcing. Setting this option to 1 will make that LMS will
       enforce SSL connection doing redirect to
       'https://'.$_SERVER[HTTP_HOST].$_SERVER[REQUEST_URI] at every
       access without SSL. Default: 0 (off).
       Example: force_ssl = 1
     * allow_mac_sharing
       Permission for addition of nodes with duplicated MAC address (not
       checking that some computer have that MAC yet). Default: 0 (off)
       Example: allow_mac_sharing = 1
     * smarty_debug
       Enable Smarty's debug console. Usefull for tracking values passed
       from PHP to Smarty. Default: 0 (off).
       Example: smarty_debug = 1
     * lang_debug
       Enable LMS language console. Usefull for tracking missing
       translation strings. Default: 0 (off).
       Example: lang_debug = 1
     * debug_email
       E-mail address for debugging - at this address will goes messages
       sended from madule 'Mailing', instead of proper users.
       Example: debug_email = root@localhost
     * default_zip, default_city, default_address
       Default zip code, city, street, used while inserting of new user.
       Useful when we have many users on the same street.
       Example: default_zip = 39-300
     * use_current_payday
       Qualify to use current day of month for payment day instead of
       most often used day. Default: 0 (off).
       Example: use_current_payday = 1
     * lastonline_limit
       Specify time (in seconds), after which node will be treated as
       inactive. It should match with frequency of running script
       inspecting nodes activity (i.e. lms-fping). Default: 600.
       Example: lastonline_limit = 300
     * timetable_days_forward
       Specify number of days (including current day) on timetable.
       Default: 7.
       Example: timetable_days_forward = 2
     * arpd_servers
       List of arpd servers for reading of MAC addresses from remote
       networks. That list should include items IP[:port] separated with
       spaces. Default: empty.
       Example: arpd_servers = 192.168.1.1 192.168.2.1
     * helpdesk_backend_mode
       When enabled, all messages in helpdesk system (except sended to
       requestor) will be send to mail server at address of right queue.
       On server should be running script lms-rtparser, which will write
       messages to database. Default: disabled.
       Example: helpdesk_backend_mode = On
     * helpdesk_sender_name
       Name of message sender or predefined values: 'queue' - ticket's
       queue name, 'user' - name of logged user (sender). Default: empty.
       Example: helpdesk_sender_name = Helpdesk
     * contract_template
       Specify customer contract template. Can include comma separated
       list of contract templates. Default: contract.html.
       Example: contract_template = "../my_templates/contract.html"
       Example: contract_template = "contract.html:Default Contract,
       file.html:Contract Plus"
     * to_words_short_format
       Specify format of verbal amounts representation (on invoices). For
       value "1" verbal expand of 123,15 will be "one two thr 15/100".
       Default: 0.
       Example: to_words_short_format = 1
     * nodepassword_length
       Length of (auto-generated) node password. Max.32. Default: 16.
       Example: nodepassword_length = 8
     _________________________________________________________________

2.6. Access rights

2.6.1. Idea

   LMS may define up to 256 rules of access to the system. Each can
   forbid or permit access to definite modules. To each user we can
   freely assign combination of access rules.

   By default following access rules list is defined:
     * full access
     * read only (excluding Helpdesk)
     * nodes connection/disconnection
     * finances management
     * configuration reload
     * customers management
     * nodes management
     * stats access
     * mailing access
     * Helpdesk (RT) administration
     * Helpdesku (RT) operation
     * accounts management
     * UI configuration
     * networks and devices management
     * timetable management
     * users edition and addition forbidden
     * no access

   Some of them permit access to modules and two forbid. Modules that
   user has always access is: welcome, copyrights, logout, chpasswd
   (chpasswd can change only own password), access to others is defined
   by rules.
   Note

   If we do not define to user any access rule, then LMS implicitly
   define rule 0 for him - full access.
     _________________________________________________________________

2.6.2. How does it work?

   Decision if user have right to access to module or not, looks like
   this:
   - First of all: checking list of modules that user always have access.
   - Next: checking if module mach to rules in each levels that user have
   access.
   - Finally: Decision if user have authorizations to access to modules.
   If module mach to any level that forbid access then access will be
   forbiden even if user have level that permit access to module. (for
   example. Someone have full access and no access to adding computer
   module then he would not be able to appeal to this module). If module
   maches to level that permit access to module. Then LMS permit farther
   work. But if module does not match on any level then also will be
   printed no-access-msg.
     _________________________________________________________________

2.7. Upgrade

   LMS upgrade process in two stages. First make directory of new version
   (overwriting old files with new ones is not recommended) then we have
   to make some changes in database.

   For easy migration of data in catalog/doc we prepared
   file:UPGRADE-1.0-1.5.mysql and UPGRADE-1.0-1.5.pgsql for upgrade from
   1.0 to 1.5 version. Also UPGRADE-1.2-1.5.mysql and
   UPGRADE-1.2-1.5.pgsql For migration from version 1.3 (and 1.3.0) to
   current version. In those files you can find short description how to
   upgrade in dependence of used database. In versions 1.3.0 and higher
   upgrade of database structure is automatically executed while first
   logon.

   Note

   In 1.0.x and higher versions ADOdb library Is not required, you can
   remove applicable directory from lib/ directory.
     _________________________________________________________________

2.8. Invoices

   In LMS is possible automatic and manual invoices settlement. Manual
   invoices creation is is possible in 'New Invoice' module from
   'Finances' menu. Automatic settlement need to enable that option while
   liabilities ascribing to customers. In that case invoices are created
   while accounting by lms-payments script or daemon almsd.

   For proper working and printouts you will need to set custom options
   in section [invoices] of lms.ini:
     * number_template
       Invoice number pattern. Accessible variables: '%N' - successive
       number in year/month, '%M' - settlement month number, '%Y' -
       settlement year number (four digits). Default: %N/LMS/%Y
       Example: number_template = %N/%Y
     * monthly_numbering
       Enable this option when you need to reset invoice numbering on
       start of every month. Default: disabled
       Example: monthly_numbering = 1
     * header
       Seller. Can use string "\n" for lines separation. Default: empty.
       Example: header = "SuperNet ISP\nNew Street 15\n12-000 City\n"
     * footer
       Invoice footer - e.g. seller description. Footer will be placed at
       bottom of a invoice, small font. Like in header option use "\n" to
       separate lines. Default: empty
       Example: footer = "Internet Service Provider K-27, phone
       555-23-23, etc."
     * default_author
       Invoice settler. Default: empty
       Example: default_author = "invoicing expert"
     * cplace
       Invoice settlement place (city). Default: empty.
       Example: cplace = Warsaw

   Generated invoices can be viewed in double ways: by printer icon on
   balance sheet or by 'Invoices List' in 'Finances' menu. In second
   case, is also possible to filter invoices for printing.
     _________________________________________________________________

2.8.1. HTML

   With default settings invoices are printed in html format with use of
   default template. In [invoices] section are also options:
     * template_file
       Invoice template, which should be placed in templates directory.
       Default: invoice.html.
       Example: template_file = invoice-mynet.html
     * content_type
       Invoice content-type. If you enter here 'application/octet-stream'
       then browser will send file to save on disk, instead of displaying
       it. It's useful if you use your own template which generate e.g.
       rtf or xls file. Default: 'text/html'
       Example: content_type = application/octet-stream
     * attachment_name
       File name for saving finished invoice printout. WARNING: Setting
       attachment_name with default content_type will (in case of MSIE)
       print invoice + prompt for save on disk + bonus browser crash
       (6.0SP1 on WInXP). Default: empty.
       Example: attachment_name = invoice.xls

   Generated HTML invoice consist originals and copies, which are
   separated by CSS page-break markups. So every modern browser that
   support CSS should print many-page invoices shallow. This function was
   tested on Microsoft Internet Explorer 6.0, Opera 7.02 and Mozilla 1.3.

   Note

   Almost every internet browser has printing configuration, where
   functions like header and footer or URL printing can be disabled.
     _________________________________________________________________

2.8.2. PDF

   It's possible to create invoices as pdf files. Setting option type
   from [invoices] section to 'pdf' will make, that invoice will be
   created in pdf instead of html. Option template_file performs similiar
   part like in html invoices, with one difference, it has predefined
   values: 'standard' - basic invoice (invoice.html equivalent) and
   'FT-0100' - invoice adjusted for printing on FT-0100 print including
   payment form. You can set template_file option for php file name, but
   this feature is assigned for advanced users. because it require
   creation of more complicated php file than in html invoices simple
   Smarty template.

   Data for printout of payment form are stored in [finances] section of
   lms.ini file. That is:
   name - seller name
   shortname - short seller name
   address - seller address
   zip - seller postal code
   city - seller city
   account - banking account number
     _________________________________________________________________

Chapter 3. A.L.E.C's LMS Daemon

3.1. Basics

   Written in C program facilitate management of services. Daemon is
   responsible for starting of appropriate modules on user demand only.
   Modules are making configuration files based on data from LMS's
   database and restarting selected services on a server.

   Why such name? The better part of daemon code was written by one of
   developers - Aleksander 'A.L.E.C' Machniak, nevertheless must
   underline a contribution of Marcina 'Lexx' Krol. Program include
   fragments of code of Mateusza 'mteg' Golicz's old daemon and use
   Nicolas Devillard's iniparser library.
     _________________________________________________________________

3.1.1. Requirements

   A.L.E.C's LMS Daemon require:
     * LMS user interface installation
     * libmysqlclient (full MySQL installation or respective packet) or
       libpq in case of PostgreSQL database or sqlite
     * libdl (that is in every present-day distribution)
     * C compiler
     _________________________________________________________________

3.1.2. Installation

   Prior to compilation you must set options described on following
   listing with help of ./configure script (in brackets are shown default
   values):
  --help                help
  --enable-debug0       SQL queries logging (disabled)
  --enable-debug1       events logging (disabled)
  --with-pgsql          enables using of PostgreSQL database (disabled)
  --with-mysql          enables using of MySQL database (enabled)
  --with-sqlite         enables using of SQLite database (disabled)
  --prefix=DIR          program install directory (/usr/local/bin)
  --libdir=DIR          location of database libraries (/usr/lib)
  --incdir=DIR          location of database header files (/usr/include)

   Then, required is to set database which you will use (--with-mysql or
   --with-pgsql) and location of libraries supplied with database
   (--incdir, --libdir). You can use only one database. If you will
   change database, you must to recompile daemon.
# ./configure --with-pgsql --libdir=/usr/local/pgsql/lib --incdir=/usr/local/pgsql/include

   After that you can compile and install (put daemon in directory given
   with --prefix option):
# make && make install

   Finally, compiled modules (files with .so extension), found in
   directory modules/module_name move to any directory. Their location
   you will set in configuration file.
     _________________________________________________________________

3.1.3. Configuration

   Example daemon configuration you can find in file lms.ini.sample.
   Following listing describe basic options for daemon (modules
   configuration is described in separate chapters concerning modules):
[database]
host            = localhost     # host name or IP, default: localhost
user            = lms           # user name, default: lms
password        = mypasswd      # database password, default: empty
database        = lms           # database name, default: lms
port            = 0             # port number, default: 0

[lmsd]
sleeptime       = 30            # time interval (in seconds) how often to
                                # check for reload order, default: 30
instances       = hosts oident firewall       # module instances list
command         = 'echo Connecting...'        # shell command to run before every database connection

   Note

   List of instances contains instances names detached with spaces.
   Instance is a name of section in configuration file.

   In instance section, beside config modules params, you must specify
   primary options, as on following listing:
[instance_name]
module = /path/to/module.so
info = "Additional description of module"

   Change of 'instances' and any option i instances sections do not
   require daemon restart. For other global options restart is required.
     _________________________________________________________________

3.1.4. Starting

   You can run program as a daemon working in background (option '-b').
   Then configuration and services reload is done on demand with use of
   'Reload' menu in LMS-UI. Option 'sleeptime' (-s) specify interval
   between database reads. When daemon detects reload order, he runs
   modules defined by 'instances' option in lms.ini. For example:
# almsd -b

   Other way to run is disposable reload with usage of cron. You must to
   use this manner of reload for runing modules like 'payments' 'notify'
   or 'traffic'. In that case you can specify instances to reload with
   use of option '-i'. Example crontab's entry:
  1 0 * * *    /usr/local/bin/almsd -qi "payments notify"

   Following listing describe program command line options:
  -c     path to config (default: /etc/lms/lms.ini)
  -i     list of instances (separated by space) to reload
  -b     run in background (daemon mode)
  -s     'reload' table reading interval in sec. (default: 30)
  -q      reload and quit
  -h      prints command line options
     _________________________________________________________________

3.2. Modules

   Daemon can only run modules and they are doing all job. Most of
   modules are designed to specific application, only 'hostfile' can be
   used to many different configs (services), i.e. various firewall
   types. Daemon and modules configuration examples contains file
   daemon/lms.ini.sample. Modules configuration parameters must be placed
   in appropriate instances sections.
     _________________________________________________________________

3.2.1. Modules list

   Table 3-1. List of almsd daemon modules
   Name Description
   system Shell commands execution
   dhcp Configuration of DHCP server
   cutoff Disconnection of indebted users
   dns Configuration of DNS server
   ethers Making of /etc/ethers file
   hostfile Universal module (i.e. making iptables rules)
   notify E-mail notifying users about payments
   ggnotify Gadu-Gadu (polish internet messenger) notifying users about
   payments
   payments Payments accounting
   oident Configuration of oident daemon
   tc Making HTB rules
   traffic Internet link usage statistics
   pinger Users activity scanning
     _________________________________________________________________

3.2.2. System

3.2.2.1. Description

   This module doing only one thing. It's executing of given command of
   linux shell. It can be usefull when you want to execute some command
   or run external script while configuration reload, e.g. one of them,
   which are in LMS /bin directory.
     _________________________________________________________________

3.2.2.2. Configuration

   By reason of above-mentioned you can define only command contents.
   Shell should advise with list of commands separated by semicolons:
     * command
       Shell command. Default: empty.
       Example: command = 'echo "hello"'
     _________________________________________________________________

3.2.3. Payments

3.2.3.1. Description

   Module accounts customers subscription payments and solid payments. It
   should be executed commonly once a day. Payments are accounted on base
   of customers liabilities and writed to database with description
   defined in 'comment' option. After accounting are created invoices.
   Description of solid payment is a mass of its name and creditor name.
   At the end from database are removed out-of-dated customers
   liabilities.
     _________________________________________________________________

3.2.3.2. Configuration

   For that module you can use following options:
     * comment
       Operation description. '%period' will be replaced by dates from-to
       of subscription, e.g. '10.10.2003 - 09.11.2003', and '%tariff' by
       name of tariff. Default: 'Abonament wg taryfy: '%tariff' za okres:
       %period'.
       Example: comment = 'Subscription: %tariff for period %period'
     * up_payments
       Decision how should be counted period in comment - forward or
       backward relatively to date of payment accounting. Default: yes.
       Example: up_payments = no
     * expiry_days
       Defines number of days from date of liability expiration, after
       which that liability will be removed from database. When you set
       '0' data will be removed immediately after date, for which binds
       that liability. Default: 30.
       Example: expiry_days = 365
     * deadline
       Payment deadline in days. Default: 14.
       Example: deadline = 21
     * paytype
       Payment type. Default: 'PRZELEW'.
       Example: paytype = 'CASH'
     _________________________________________________________________

3.2.4. Notify

3.2.4.1. Description

   Module 'notify' is destined to inform customers of debt in payments
   using electronic mail. Current customer balance is compared with
   'limit' option, if is lower - message will be sent. Message content is
   taken from prepared template, which can consists following variables:
     * %saldo - current customer balance
     * %name - customer forename
     * %lastname - customer name/lastname
     * %last_10_in_a_table - last 10 operations on customer account
     _________________________________________________________________

3.2.4.2. Configuration

   Below are presented configuration options of 'notify' module:
     * template
       Location of message template file. Default: empty.
       Example: template = modules/notify/sample/mailtemplate
     * file
       Location of temprary file. Default: /tmp/mail
       Example: file = /tmp/mail.txt
     * command
       Shell command for e-maila sending. '%address' will be replaced by
       customer e-mail address. Default: 'mail -s "Liabilities
       Information" %address < /tmp/mail'.
       Example: command = 'mail -s "You must pay or ..." $address <
       /tmp/mail.txt'
     * limit
       Message is sended when customer balance will decrease below value
       defined in that option. Default: 0
       Example: limit = -20
     * debug_mail
       If set, at this address goes all messages. Useful for testing.
       Default: empty.
       Example: debug_mail = localhost@my.net
     _________________________________________________________________

3.2.5. Ggnotify

3.2.5.1. Description

   Equivalent of 'notify' module destined to sending gadu-gadu messages.
   Gadu-Gadu it's a most popular polish internet messenger.

   Module require installed libgadu library and sources of ekg program.
   Appropriate paths for them must to be put in modules/ggnotify/Makefile
   before module compilation.
     _________________________________________________________________

3.2.5.2. Configuration

   Podobnie jak w 'notify' masz do dyspozycji nastêpuj±ce zmienne:
     * template
       Location of message template file. Default: empty.
       Example: template = modules/notify/sample/mailtemplate
     * uin
       Gadu-gadu identifier of message sender. Default: empty.
       Example: uin = 1234567
     * password
       Password for account specified in 'uin'. Default: empty.
       Example: password = "my_HURD.password"
     * limit
       Message is sended when customer balance will decrease below value
       defined in that option. Default: 0
       Example: limit = -20
     * debug_uin
       If is set, there will go all messages. Default: empty.
       Example: debug_uin = 7654321
     _________________________________________________________________

3.2.6. Cutoff

3.2.6.1. Description

   Cutoff do change nodes status to 'disconnected' and/or enable warnings
   for customers, which have debts at an account greater than specified
   limit. This module do not blocking network access.
     _________________________________________________________________

3.2.6.2. Configuration

   For module 'cutoff' we have following options:
     * limit
       Disconnection ensue if customer balance will decrease below
       specified value. Default: 0.
       Example: limit = -20
     * command
       Specify system command, wich will be executed if at least one
       customer will be disconnected or warning will be enabled. Default:
       empty.
       Example: command = 'almsd -qi firewall'
     * warning
       Enable warning for disconnected customer and write specified by
       this option message. If empty, warning will be not enabled. Date
       in message is hidden in '%time' variable. Default: 'Automatyczna
       blokada spowodowana przekroczeniem terminu wp³aty (dd.mm.yyyy)".
       Example: warning = ""
     * warnings_only
       Here you can to decide, if you want to use this module only for
       warnings enabling. Default: false.
       Example: warnings_only = true
     _________________________________________________________________

3.2.7. Dhcp

3.2.7.1. Description

   Module for management of DHCP server, creates configuration file and
   restarts service. Option 'command' make possible execution of other
   functions (programs).
     _________________________________________________________________

3.2.7.2. Configuration

   Most of configuration parameters match with parts of dhcpd
   configuration file, which in typical purposes do not need change:
     * file
       Specify location of dhcp server configuration file. Default:
       /etc/dhcpd.conf.
       Example: file = /etc/dhcp/dhcpd.conf
     * command
       Shell command executed after file generation. Default: 'killall
       dhcpd; /usr/sbin/dhcpd'.
       Example: command = '/etc/rc.d/rc.dhcpd restart'
     * begin
       File header. Default: "shared-network LMS {".
       Example: begin = "shared-network LMS {"
     * end
       File footer. Default: "}".
       Example: end = "\n}"
     * subnet_start
       Subnet header. '%a' - name, '%m' - mask. Default: "subnet %a
       netmask %m {\ndefault-lease-time 86400;\nmax-lease-time 86400;".
       Example: subnet_start = "subnet %a netmask %m {default-lease-time
       3600;"
     * subnet_end
       Subnet footer. Default: "}".
       Example: subnet_end = '\t}'
     * subnet_gateway
       Subnet gateway. '%i' will be changed to ip address. Default:
       'option routers %i;'.
       Example: subnet_gateway = "option routers %i"
     * subnet_dns
       Subnet DNS servers. '%i - dns addresses. Default: "option
       domain-name-servers %i;".
       Example: subnet_dns = "option domain-name-servers 192.168.0.1"
     * subnet_domain
       Subnet domain name. '%n' - name. Default: "option domain-name
       %n;".
       Example: subnet_domain = "option domain-name test.%n;"
     * subnet_wins
       WINS servers. '%i' - server IP address. Default: "option
       netbios-name-servers %i;".
       Example: subnet_wins = ""
     * subnet_range
       Subnet address range. '%s' - initial address, '%e' - end of range.
       Default: "range %s %e;".
       Example: subnet_range = "range %s %e;"
     * host
       Hosts parameters, where '%n' - host name, '%m' - MAC, '%i' - IP
       address. Default: "\thost %n {\n\t\thardware ethernet %m;
       fixed-address %i; \n\t}".
       Example: host = "host %n {hardware ethernet %m; fixed-address
       %i;}"
     * networks
       List of network names to take into consideration. Letters size is
       not important. Default: empty (all networks).
       Example: networks = "lan1 lan2"
     * usergroups
       List of customers groups to take into consideration. Letters size
       is not important. Default: empty (all groups).
       Example: usergroups = "group1 group2"
     _________________________________________________________________

3.2.8. Hostfile

3.2.8.1. Description

   Module 'hostfile' is a rather multipurposed tool. It performs loop on
   all hosts from database distingue status of them
   (connected/diconnected), network for which are they connected and
   groups of they owners. Because of that it is possible to create e.g.
   any firewall rules, or file /etc/hosts. Data are writed to file and
   after that is executed specified shell command.
     _________________________________________________________________

3.2.8.2. Configuration

   In 'grantedhost' and 'deniedhost' options can be used special
   sequences, which during write to file will be replaced by '%i' - IP
   address, '%m' - MAC address, '%n' - host name, '%p' - password,
   '%info' - node description, '%domain' - domain, '%net' - net name,
   '%gw' - gateway address of network for which belongs given node. This
   module has following options:
     * file
       Location of generated file. Default: /tmp/hostfile
       Example: file = /etc/rc.d/rc.firewall
     * command
       Shell command(s) executed after 'file' generation. Default: empty
       Example: command = '/bin/sh /etc/rc.d/rc.firewall'
     * begin
       File header. Default: "/usr/sbin/iptables -F FORWARD\n"
       Example: begin = "IPT=/usr/sbin/iptables \n$IPT -F FORWARD\n"
     * end
       File footer. Default: "/usr/sbin/iptables -A FORWARD -J REJECT\n"
       Example: end = "$IPT -A FORWARD -J REJECT\n"
     * grantedhost
       Text of rule for connected node. Default: "/usr/sbin/iptables -A
       FORWARD -s %i -m mac --mac-source %m -j ACCEPT\n"
       Example: grantedhost = "$IPT -A FORWARD -s %i -m mac --mac-source
       %m -j ACCEPT\n"
     * deniedhost
       Text of rule for disconnected node. Default: "/usr/sbin/iptables
       -A FORWARD -s %i -m mac --mac-source %m -j REJECT\n"
       Example: deniedhost = "$IPT -A FORWARD -s %i -m mac --mac-source
       %m -j REJECT\n"
     * networks
       List of network names for consideration. Letters size doesn't
       matter. Default: empty (all networks).
       Example: networks = "lan1 lan2"
     * usergroups
       List of customers groups names for consideration. Letters size
       doesn't matter. Default: empty (all groups).
       Example: usergroups = "grupa1 grupa2"
     * skip_dev_ips
       If enabled (yes, true) addresses of network devices will be
       ignored (omitted). Default: yes
       Example: skip_dev_ips = no
     _________________________________________________________________

3.2.9. Traffic

3.2.9.1. Description

   'Traffic' is an equivalent of perl's script lms-traffic, load to
   database internet link stats from file created by user. That file must
   have format: host_IP upload download. More informations (including how
   to make such file) can be found in chapter with lms-traffic
   description.
     _________________________________________________________________

3.2.9.2. Configuration

   Only one available option is also mandatory:
     * file
       Location of file with firewall stats. Default:
       /var/log/traffic.log
       Example: file = /tmp/log
     _________________________________________________________________

3.2.10. Tc (HTB)

3.2.10.1. Description

   Generate script containing iptables and tc rules for traffic control
   i.e. band and customer connections limiting. Rules for nodes can be
   freely defined and used not only for traffic control. Principle of
   operation of this module is following: First of all are retrived data
   of all customers. Accounted are totals of limitations (uprate,
   downrate, upceil, downceil, connection limit) for each customer. Then
   is performed loop with checking of networks and groups (if specified).
   If limit values are not zeroes rules are writed to file with variables
   replacement. In rules can be used following variables: %name - host
   name, %i - IP address, %m - MAC, %uprate, %downrate, %upceil,
   %downceil, %plimit, %climit, and %x - counter with initial value 100
   incremented by one for each node.

   Default policy of htb class creating assume one class for all nodes of
   each customer. In can be changed with 'one_class_per_host' option.

   Default configuration assume that your system supports htb and
   iptables with modules limit, connlimit, mark and ipp2p. You can patch
   kernel or use sources available at polish project www.inet.one.pl.
     _________________________________________________________________

3.2.10.2. Configuration

   For your disposal we have basic options like groups of customers,
   file, command, networks and extra options which are define tc and
   firewall rules. Default config is designed for 512/128 kbit and
   100mbit links.

   Note

   Values of configuration options in lms.ini must be putted in one line.
   In case of that module it can be not very handy, so you can create
   file containing whole header (option begin), and then use option
   command for join with the rest of file generated by this module.
     * file
       Location of file. Default: /etc/rc.d/rc.htb.
       Example: file = /tmp/rc.htb
     * command
       Shell command executed after file creation. Default: "sh
       /etc/rc.d/rc.htb start".
       Example: command = "chmod 700 /tmp/rc.htb; /tmp/rc.htb start"
     * begin
       Script header. Default:
"#!/bin/sh
IPT=/usr/sbin/iptables
TC=/sbin/tc
LAN=eth0
WAN=eth1
BURST="burst 30k"

stop ()
{
$IPT -t mangle -D FORWARD -i $WAN -j LIMITS >/dev/null 2>&1
$IPT -t mangle -D FORWARD -o $WAN -j LIMITS >/dev/null 2>&1
$IPT -t mangle -F LIMITS >/dev/null 2>&1
$IPT -t mangle -X LIMITS >/dev/null 2>&1
$IPT -t mangle -F OUTPUT
$IPT -t filter -F FORWARD
$TC qdisc del dev $LAN root 2> /dev/null
$TC qdisc del dev $WAN root 2> /dev/null
}

start ()
{
stop
$IPT -t mangle -N LIMITS
$IPT -t mangle -I FORWARD -i $WAN -j LIMITS
$IPT -t mangle -I FORWARD -o $WAN -j LIMITS
# incomming traffic
$IPT -t mangle -A OUTPUT -j MARK --set-mark 1
$TC qdisc add dev $LAN root handle 1:0 htb default 3 r2q 1
$TC class add dev $LAN parent 1:0 classid 1:1 htb rate 99000kbit ceil 99000kbit quantum 1500
$TC class add dev $LAN parent 1:1 classid 1:2 htb rate   500kbit ceil   500kbit
$TC class add dev $LAN parent 1:1 classid 1:3 htb rate 98500kbit ceil 98500kbit prio 9 quantum 1500
$TC qdisc add dev $LAN parent 1:3 esfq perturb 10 hash dst
# priorities for ICMP, TOS 0x10 and ports 22 and 53
$TC class add dev $LAN parent 1:2 classid 1:20 htb rate 50kbit ceil 500kbit $BURST prio 1 quantum 1500
$TC qdisc add dev $LAN parent 1:20 esfq perturb 10 hash dst
$TC filter add dev $LAN parent 1:0 protocol ip prio 2 u32 match ip sport 22 0xffff flowid 1:20
$TC filter add dev $LAN parent 1:0 protocol ip prio 2 u32 match ip sport 53 0xffff flowid 1:20
$TC filter add dev $LAN parent 1:0 protocol ip prio 1 u32 match ip tos 0x10 0xff flowid 1:20
$TC filter add dev $LAN parent 1:0 protocol ip prio 1 u32 match ip protocol 1 0xff flowid 1:20
# server -> LAN
$TC filter add dev $LAN parent 1:0 protocol ip prio 4 handle 1 fw flowid 1:3

# outgoing traffic
$TC qdisc add dev $WAN root handle 2:0 htb default 11 r2q 1
$TC class add dev $WAN parent 2:0 classid 2:1 htb rate 120kbit ceil 120kbit
# priorities for ACK, ICMP, TOS 0x10, ports 22 and 53
$TC class add dev $WAN parent 2:1 classid 2:10 htb rate 60kbit ceil 120kbit prio 1 quantum 1500
$TC qdisc add dev $WAN parent 2:10 esfq perturb 10 hash dst
$TC filter add dev $WAN parent 2:0 protocol ip prio 1 u32 match ip protocol 6 0xff \
match u8 0x05 0x0f at 0 match u16 0x0000 0xffc0 at 1 match u8 0x10 0xff at 33 flowid 2:10
$TC filter add dev $WAN parent 2:0 protocol ip prio 1 u32 match ip dport 22 0xffff flowid 2:10
$TC filter add dev $WAN parent 2:0 protocol ip prio 1 u32 match ip dport 53 0xffff flowid 2:10
$TC filter add dev $WAN parent 2:0 protocol ip prio 1 u32 match ip tos 0x10 0xff flowid 2:10
$TC filter add dev $WAN parent 2:0 protocol ip prio 1 u32 match ip protocol 1 0xff flowid 2:10
# server -> Internet
$TC class add dev $WAN parent 2:1 classid 2:11 htb rate 30kbit ceil 120kbit prio 2 quantum 1500
$TC qdisc add dev $WAN parent 2:11 esfq perturb 10 hash dst
$TC filter add dev $WAN parent 2:0 protocol ip prio 3 handle 1 fw flowid 2:11
$TC filter add dev $WAN parent 2:0 protocol ip prio 9 u32 match ip dst 0/0 flowid 2:11
       Example: begin = "#!/bin/bash\n$TC=/usr/local/sbin/tc\n"
     * end
       Script footer. Default:
}

case "$1" in
    'start')
     start
    ;;
    'stop')
     stop
    ;;
    'status')
     echo "WAN Interface"
     echo "============="
     $TC class show dev $WAN | grep root
     $TC class show dev $WAN | grep -v root | sort | nl
     echo "LAN Interface"
     echo "============="
     $TC class show dev $LAN | grep root
     $TC class show dev $LAN | grep -v root | sort | nl
    ;;
    *)
     echo -e "\nUsage: rc.htb start|stop|status"
    ;;
esac
       Example: end = ""
     * one_class_per_host
       Specify policy of htb class creation. In default setting all
       computers of customer will be placed in one class. Setting it on
       'true' will made that rules specified in host_htb_up and
       host_htb_down will be generated for all customer's computers (with
       different value of '%x'). Rules host_mark_down, host_mark_up,
       host_plimit and host_climit are generated for each node regardless
       of this option setting. Default: false
       Example: one_class_per_host = 1
     * host_mark_down
       Mark rule for each computer. Default:
# %n
$IPT -t mangle -A LIMITS -d %i -j MARK --set-mark %x
       Example: host_mark_down = ""
     * host_mark_up
       Mark rule for each computer. Default:
$IPT -t mangle -A LIMITS -s %i -j MARK --set-mark %x
       Example: host_mark_up = ""
     * host_htb_down
       Rules for each computer executed when uprate and downrate are not
       zeroes. Default:
$TC class add dev $LAN parent 1:2 classid 1:%x htb rate %downratekbit ceil %downceilkbit $BURST prio 2 quantum 1500
$TC qdisc add dev $LAN parent 1:%x esfq perturb 10 hash dst
$TC filter add dev $LAN parent 1:0 protocol ip prio 5 handle %x fw flowid 1:%x
       Example: host_htb_down = ""
     * host_htb_up
       Rules for each computer executed when uprate and downrate are not
       zeroes. Default:
$TC class add dev $WAN parent 2:1 classid 2:%x htb rate %upratekbit ceil %upceilkbit $BURST prio 2 quantum 1500
$TC qdisc add dev $WAN parent 2:%x esfq perturb 10 hash dst
$TC filter add dev $WAN parent 2:0 protocol ip prio 5 handle %x fw flowid 2:%x
       Example: host_htb_up = ""
     * host_climit
       Rule with simultaneous tcp connections limit. Executed when climit
       in not a zero. Default:
$IPT -t filter -I FORWARD -p tcp -s %i -m connlimit --connlimit-above %climit -m ipp2p --ipp2p -j REJECT
       Example: host_climit = "$IPT -t filter -I FORWARD -p tcp -s %i -m
       connlimit --connlimit-above -j REJECT"
     * host_plimit
       Rule with limiting of packets in time unit (here second). Executed
       when plimit is not a zero. Default:
$IPT -t filter -I FORWARD -p tcp -d %i -m limit --limit %plimit/s -m ipp2p --ipp2p -j ACCEPT
$IPT -t filter -I FORWARD -p tcp -s %i -m limit --limit %plimit/s -m ipp2p --ipp2p -j ACCEPT
       Example: host_plimit = ""
     * networks
       List of network names for consideration. Case insensitive.
       Default: empty (all networks).
       Example: networks = "lan1 lan2"
     * usergroups
       List of customers groups for consideration. Case insensitive.
       Default: empty (all groups).
       Example: usergroups = "grupa1 grupa2"
     _________________________________________________________________

3.2.11. Dns

3.2.11.1. Description

   Configuration of named zones. This is a one from most complicated
   modules. Create zone files for each network and equivalent entries in
   named.conf on the basis of templates of this files. Example templates
   are placed in /modules/dns/sample directory.
     _________________________________________________________________

3.2.11.2. Configuration

     * forward-patterns
       Directory with zone templates. Default: forward.
       Example: forward-patterns = /dns/patterns/forward
     * reverse-patterns
       Directory with reverse zone templates. Default: reverse.
       Example: reverse-patterns = /dns/patterns/revers
     * generic-forward
       Default template. It'll be used if in directory specified by
       'forward-patterns' will not found file with name corresponding to
       network domain name. Default: modules/dns/sample/forward/generic.
       Example: generic-forward = /dns/patterns/forward
     * generic-reverse
       Default template. It'll be used if in directory specified by
       'reverse-patterns' will not found file with name corresponding to
       network IP address. Default: modules/dns/sample/reverse/generic.
       Example: generic-reverse = /dns/patterns/forward
     * forward-zones
       Directory for generated zones files. Default:
       modules/dns/sample/out/forward.
       Example: forward-zones = /dns/forward
     * reverse-zones
       Directory for generated reverse zones files. Default:
       modules/dns/sample/out/reverse.
       Example: reverse-zones = /dns/reverse
     * host-reverse
       Line in reverse zone file for each computer of given network.
       Default: "%n IN A %i\n".
       Example: host-reverse = "\t %n IN A %i\n"
     * host-forward
       Line in zone file for each computer of given network.. Default:
       "%c IN PTR %n.%d.\n".
       Example: host-forward = "\t %c IN PTR %n.%d.\n"
     * conf-pattern
       Location of main template of server configuration file. Default:
       modules/dns/sample/named.conf.
       Example: conf-pattern = /dns/patterns/named.conf
     * conf-output
       Location of main configuration file. Default: /tmp/named.conf.
       Example: conf-output = /etc/named.conf
     * conf-forward-entry
       Entry for each zone in main configuration file. Default: 'zone
       "%n" {\ntype master;\n file "forward/%n"; \nnotify yes; \n}; \n'.
       Example: conf-forward-entry = 'zone "%n" { \n\ttype master;
       \n\tfile "forward/%n"; \n\tnotify yes; \n}; \n'
     * conf-reverse-entry
       Entry for each reverse zone in main configuration file. Default:
       'zone "%c.in-addr.arpa" { \ntype master; \nfile "reverse/%i";
       \nnotify yes; \n}; \n'.
       Example: conf-revers-entry = 'zone "%c.in-addr.arpa" { \n\ttype
       master; \n\tfile "reverse/%i"; \n\tnotify yes; \n}; \n'
     * command
       Shell command executed after creation of files. Default: empty.
       Example: command = "killall -HUP named"
     * networks
       List of network names for consideration. Case insensitive.
       Default: empty (all networks).
       Example: networks = "lan1 lan2"
     * usergroups
       List of customer (user) groups for consideration. Case
       insensitive. Default: empty (all groups).
       Example: usergroups = "grupa1 grupa2"
     _________________________________________________________________

3.2.12. Ethers

3.2.12.1. Description

   This module creates configuration of system ARP table. Setting option
   'dummy_macs' you can make that all disconnected computers will have
   mac address 00:00:00:00:00:00.
     _________________________________________________________________

3.2.12.2. Configuration

   Basic options:
     * file
       Location of file. Default: /etc/ethers.
       Example: file = /tmp/ethers
     * command
       Shell command to execute after config creation. Default: 'erp -f
       /etc/ethers'.
       Example: command = ""
     * dummy_macs
       If you set to 'yes', disconnected computers will get MAC
       '00:00:00:00:00:00'. Default: "no".
       Example: dummy_macs = yes
     * networks
       List of network names for consideration. Letters size doesn't
       matter. Default: empty (all networks).
       Example: networks = "lan1 lan2"
     * usergroups
       List of customer groups names for consideration. Letter size
       doesn't matter. Default: empty (all groups).
       Example: usergroups = "grupa1 grupa2"
     _________________________________________________________________

3.2.13. Oident

3.2.13.1. Description

   Module for oidentd configuration. Basically it can be made with
   hostfile module, but here you have ready-made default settings for
   that purpose.
     _________________________________________________________________

3.2.13.2. Configuration

   And here are the options of oident:
     * begin
       Text inserted on the beginning of file. Default: empty.
       Example: begin = "#Auto-generated\n"
     * end
       Text inserted on the end of file. Default: empty.
       Example: end = ""
     * host
       Line of text for each of computers. Default: "%i\t%n\tUNIX".
       Example: host = "%i %n WINDOWS"
     * file
       Configuration file. Default: /etc/oidentd.conf.
       Example: file = /tmp/identd.conf
     * networks
       List of networks. Default: empty (all networks).
       Example: networks = 'lan1 lan2'
     * command
       Shell command(s) to execute after file creation. Default: empty.
       Example: command = "killall -HUP oidentd"
     _________________________________________________________________

3.2.14. Pinger

3.2.14.1. Description

   Module pinger it's an equivalent to perl's script lms-fping. However
   differences are fundamental. It not need external program and work
   with use of ARP protocol. It follows more or less twice faster
   execution of network scanning. Also there are not problems with hosts
   wich have disabled ping responsing. After scanning, for all online
   hosts in database is set time of scanning, used to illustrate hosts
   activity e.g. on network map.
     _________________________________________________________________

3.2.14.2. Configuration

   Pinger has only one config option:
     * networks
       List of network names. Default: empty (all networks).
       Example: networks = 'lan1 lan2'
