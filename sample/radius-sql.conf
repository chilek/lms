#
#  Configuration for the Radius SQL module, when using MySQL.
#
#  The database schema is available at:
#
#   src/radiusd/src/modules/rlm_sql/drivers/rlm_sql_mysql/db_mysql.sql
#
#  If you are using PostgreSQL, please use 'postgresql.conf', instead.
#  If you are using Oracle, please use 'oracle.conf', instead.
#  If you are using MS-SQL, please use 'mssql.conf', instead.
#
#	$Id$
#

sql {
	driver = "rlm_sql_mysql"
	server = "localhost"
	login = "lms"
	password = "twojehaslo"
	radius_db = "lms"
	acct_table1 = "radacct"
	acct_table2 = "radacct"
	nas_table = "nas"
	deletestalesessions = yes
	sqltrace = no
	sqltracefile = ${logdir}/sqltrace.sql
	num_sql_socks = 15
	connect_failure_retry_delay = 60
	#safe-characters = "@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_: /"
	sql_user_name = "%{User-Name}"

	accounting_onoff_query = "UPDATE ${acct_table1} \
		SET AcctStopTime='%S', \
		AcctSessionTime=unix_timestamp('%S') - unix_timestamp(AcctStartTime), \
		AcctTerminateCause='%{Acct-Terminate-Cause}', \
		AcctStopDelay = '%{Acct-Delay-Time}' \
	    WHERE AcctSessionTime=0 \
		 AND AcctStopTime=0 \
		AND NASIPAddress= '%{NAS-IP-Address}' AND AcctStartTime <= '%S'"

	accounting_update_query = "UPDATE ${acct_table1} \
            SET FramedIPAddress = '%{Framed-IP-Address}', \
        	AcctSessionTime = '%{Acct-Session-Time}', \
        	AcctInputOctets = '%{Acct-Input-Octets}', \
        	AcctOutputOctets = '%{Acct-Output-Octets}' \
            WHERE AcctSessionId = '%{Acct-Session-Id}' \
        	AND UserName = '%{SQL-User-Name}' \
        	AND NASIPAddress= '%{NAS-IP-Address}'"

	accounting_update_query_alt = "INSERT into ${acct_table1} \
	    (AcctSessionId, AcctUniqueId, UserName, Realm, NASIPAddress, NASPortId, \
	    NASPortType, AcctStartTime, AcctSessionTime, AcctAuthentic, ConnectInfo_start, \
	    AcctInputOctets, AcctOutputOctets, CalledStationId, CallingStationId, \
	    ServiceType, FramedProtocol, FramedIPAddress, AcctStartDelay) \
	    VALUES ('%{Acct-Session-Id}', '%{Acct-Unique-Session-Id}', '%{SQL-User-Name}', \
	    '%{Realm}', '%{NAS-IP-Address}', '%{NAS-Port}', '%{NAS-Port-Type}', \
	    DATE_SUB('%S',INTERVAL (%{Acct-Session-Time:-0} + %{Acct-Delay-Time:-0}) SECOND), \
	    '%{Acct-Session-Time}', '%{Acct-Authentic}', '', '%{Acct-Input-Octets}', \
	    '%{Acct-Output-Octets}', '%{Called-Station-Id}', '%{Calling-Station-Id}', \
	    '%{Service-Type}', '%{Framed-Protocol}', '%{Framed-IP-Address}', '0')"

	accounting_start_query = "INSERT into ${acct_table1} \
	    (AcctSessionId, AcctUniqueId, UserName, Realm, NASIPAddress, NASPortId, \
	    NASPortType, AcctStartTime, AcctStopTime, AcctSessionTime, AcctAuthentic, \
	    ConnectInfo_start, ConnectInfo_stop, AcctInputOctets, AcctOutputOctets, \
	    CalledStationId, CallingStationId, AcctTerminateCause, ServiceType, \
	    FramedProtocol, FramedIPAddress, AcctStartDelay, AcctStopDelay) \
	    VALUES ('%{Acct-Session-Id}', '%{Acct-Unique-Session-Id}', '%{SQL-User-Name}', \
	    '%{Realm}', '%{NAS-IP-Address}', '%{NAS-Port}', '%{NAS-Port-Type}', \
	    '%S', '0', '0', '%{Acct-Authentic}', '%{Connect-Info}', '', '0', '0', \
	    '%{Called-Station-Id}', '%{Calling-Station-Id}', '', '%{Service-Type}', \
	    '%{Framed-Protocol}', '%{Framed-IP-Address}', '%{Acct-Delay-Time}', '0')"

	accounting_start_query_alt  = "UPDATE ${acct_table1} \
	    SET AcctStartTime = '%S', AcctStartDelay = '%{Acct-Delay-Time}', \
	    ConnectInfo_start = '%{Connect-Info}' \
	    WHERE AcctSessionId = '%{Acct-Session-Id}' AND UserName = '%{SQL-User-Name}' \
		AND NASIPAddress = '%{NAS-IP-Address}'"

	accounting_stop_query = "UPDATE ${acct_table2} \
	    SET AcctStopTime = '%S', AcctSessionTime = '%{Acct-Session-Time}', \
	    AcctInputOctets = '%{Acct-Input-Octets}', AcctOutputOctets = '%{Acct-Output-Octets}', \
	    AcctTerminateCause = '%{Acct-Terminate-Cause}', AcctStopDelay = '%{Acct-Delay-Time}', \
	    ConnectInfo_stop = '%{Connect-Info}' \
	    WHERE AcctSessionId = '%{Acct-Session-Id}' AND UserName = '%{SQL-User-Name}' \
		AND NASIPAddress = '%{NAS-IP-Address}'"

	accounting_stop_query_alt = "INSERT into ${acct_table2} \
	    (AcctSessionId, AcctUniqueId, UserName, Realm, NASIPAddress, \
	    NASPortId, NASPortType, AcctStartTime, AcctStopTime, AcctSessionTime, \
	    AcctAuthentic, ConnectInfo_start, ConnectInfo_stop, AcctInputOctets, \
	    AcctOutputOctets, CalledStationId, CallingStationId, AcctTerminateCause, \
	    ServiceType, FramedProtocol, FramedIPAddress, AcctStartDelay, AcctStopDelay) \
	    VALUES ('%{Acct-Session-Id}', '%{Acct-Unique-Session-Id}', '%{SQL-User-Name}', \
	    '%{Realm}', '%{NAS-IP-Address}', '%{NAS-Port}', '%{NAS-Port-Type}', \
	    DATE_SUB('%S', INTERVAL (%{Acct-Session-Time:-0} + %{Acct-Delay-Time:-0}) SECOND), \
	    '%S', '%{Acct-Session-Time}', '%{Acct-Authentic}', '', '%{Connect-Info}', \
	    '%{Acct-Input-Octets}', '%{Acct-Output-Octets}', '%{Called-Station-Id}', \
	    '%{Calling-Station-Id}', '%{Acct-Terminate-Cause}', '%{Service-Type}', \
	    '%{Framed-Protocol}', '%{Framed-IP-Address}', '0', '%{Acct-Delay-Time}')"

	# Uncomment simul_count_query to enable simultaneous use checking
	# simul_count_query = "SELECT COUNT(*) FROM ${acct_table1} WHERE UserName='%{SQL-User-Name}' AND AcctStopTime = 0"
	simul_verify_query = "SELECT RadAcctId, AcctSessionId, UserName, \
	    NASIPAddress, NASPortId, FramedIPAddress, CallingStationId, FramedProtocol \
	    FROM ${acct_table1} WHERE UserName='%{SQL-User-Name}' AND AcctStopTime = 0"

	# Set to 'yes' to read radius clients from the database ('nas' table)
	#readclients = yes
}

sql sql_pppoe {
    driver = "rlm_sql_mysql"
    server = "localhost"
    login = "lms"
    password = "twojehaslo"
    radius_db = "lms"
    deletestalesessions = yes
    sqltrace = no
    sqltracefile = ${logdir}/sqltrace.sql
    num_sql_socks = 15
    connect_failure_retry_delay = 60
    sql_user_name = "%{User-Name}"
    sql_set_password = ""
    authreply_table = "radreply"
    nas_table = "nas"
    readclients = no
    authorize_check_query = "SELECT \
	    id, lower(name) as UserName , 'User-Password' as Attribute , passwd as Value, '==' as op \
	FROM nodes \
	WHERE name = '%{User-Name}'\
	UNION \
        SELECT id, lower(name) as UserName , 'Simultaneous-Use' as Attribute, '1' as Value, ':=' as op \
        FROM nodes \
        WHERE name = '%{User-Name}'\
	UNION \
	SELECT 0 AS id, '%{User-Name}' AS UserName, 'Max-Octets' AS Attribute, \
            CONCAT(ROUND(COALESCE(x.dlimit, y.dlimit))) AS Value, ':=' AS op \
	FROM (\
	    SELECT n.id, MIN(n.name) AS name, SUM(t.dlimit/o.cnt) AS dlimit \
	    FROM nodeassignments na \
	    JOIN assignments a ON (na.assignmentid = a.id) \
	    JOIN tariffs t ON (a.tariffid = t.id)\
    	    JOIN nodes n ON (na.nodeid = n.id)\
    	    JOIN (\
    		SELECT assignmentid, COUNT(*) AS cnt\
    		FROM nodeassignments \
    		GROUP BY assignmentid \
    	    ) o ON (o.assignmentid = na.assignmentid)\
    	    WHERE (a.datefrom <= unix_timestamp() OR a.datefrom = 0) \
    		AND (a.dateto > unix_timestamp() OR a.dateto = 0) \
    		AND a.suspended = 0 AND n.name = '%{User-Name}'\
	    GROUP BY n.id\
        ) x\
        RIGHT JOIN ( \
    	    SELECT SUM(t.dlimit)/o.cnt AS dlimit\
            FROM assignments a\
            JOIN tariffs t ON (a.tariffid = t.id)\
            JOIN nodes n ON (a.customerid = n.ownerid)\
            JOIN ( \
        	SELECT COUNT(*) AS cnt, ownerid \
        	FROM nodes\
        	WHERE NOT EXISTS (\
        	    SELECT 1 FROM nodeassignments, assignments a \
        	    WHERE assignmentid = a.id AND nodeid = nodes.id \
        		AND a.suspended = 0 AND (a.dateto > unix_timestamp() OR a.dateto = 0))\
                GROUP BY ownerid\
            ) o ON (o.ownerid = n.ownerid)\
            WHERE (a.datefrom <= unix_timestamp() OR a.datefrom = 0) \
        	AND (a.dateto > unix_timestamp() OR a.dateto = 0) \
        	AND a.suspended = 0 AND t.dlimit != '0'\
                AND NOT EXISTS (\
            	    SELECT 1 FROM nodeassignments \
            	    WHERE assignmentid = a.id)\
            	AND n.name = '%{User-Name}'\
            GROUP BY n.id\
        ) y ON (1=1);"

    authorize_reply_query = "SELECT \
	    id, lower(name) as UserName , 'Framed-IP-Address' as Attribute, inet_ntoa(ipaddr) as Value, '==' as op \
	FROM nodes \
	WHERE name = '%{User-Name}'\
	UNION\
        SELECT 0 AS id, '%{User-Name}' AS UserName, 'Mikrotik-Rate-Limit' AS Attribute,\
             CONCAT(ROUND(COALESCE(x.upceil, y.upceil, z.upceil)),'k','/', ROUND(COALESCE(x.downceil, y.downceil, z.downceil)),'k') AS Value, '==' AS op\
        FROM (\
    	    SELECT n.id, MIN(n.name) AS name, SUM(t.downceil/o.cnt) AS downceil, SUM(t.upceil/o.cnt) AS upceil\
            FROM nodeassignments na\
            JOIN assignments a ON (na.assignmentid = a.id)\
 	    JOIN tariffs t ON (a.tariffid = t.id)\
	    JOIN nodes n ON (na.nodeid = n.id)\
	    JOIN (\
		SELECT assignmentid, COUNT(*) AS cnt\
	        FROM nodeassignments \
	        GROUP BY assignmentid\
	    ) o ON (o.assignmentid = na.assignmentid)\
	    WHERE (a.datefrom <= unix_timestamp() OR a.datefrom = 0) \
		AND (a.dateto > unix_timestamp() OR a.dateto = 0) \
		AND a.suspended = 0 AND n.name = '%{User-Name}'\
	    GROUP BY n.id\
	) x\
	RIGHT JOIN (\
	    SELECT SUM(t.downceil)/o.cnt AS downceil,\
		SUM(t.upceil)/o.cnt AS upceil\
	    FROM assignments a\
	    JOIN tariffs t ON (a.tariffid = t.id)\
	    JOIN nodes n ON (a.customerid = n.ownerid)\
	    JOIN (\
		SELECT COUNT(*) AS cnt, ownerid FROM nodes \
		WHERE NOT EXISTS (\
		    SELECT 1 FROM nodeassignments, assignments a \
		    WHERE assignmentid = a.id AND nodeid = nodes.id \
			AND a.suspended = 0 AND (a.dateto > unix_timestamp() OR a.dateto = 0))\
	        GROUP BY ownerid \
	    ) o ON (o.ownerid = n.ownerid)\
	    WHERE (a.datefrom <= unix_timestamp() OR a.datefrom = 0) \
		AND (a.dateto > unix_timestamp() OR a.dateto = 0) AND a.suspended = 0\
	        AND NOT EXISTS (SELECT 1 FROM nodeassignments WHERE assignmentid = a.id) \
	    	AND n.name = '%{User-Name}'\
	    GROUP BY n.id\
	) y ON (1=1)\
	RIGHT JOIN (\
	    SELECT n.id, n.name, 64 AS downceil, 64 AS upceil\
            FROM nodes n WHERE n.name = '%{User-Name}'\
        ) z ON (1=1)\
        UNION\
        SELECT id, UserName, Attribute, Value, op \
        FROM ${authreply_table} \
        WHERE Username = '%{SQL-User-Name}' \
        ORDER BY id;"
}

sql sql_mac {
    driver = "rlm_sql_mysql"
    server = "localhost"
    login = "lms"
    password = "twojehaslo"
    radius_db = "lms"
    deletestalesessions = yes
    sqltrace = no
    sqltracefile = ${logdir}/sqltrace.sql
    num_sql_socks = 10
    connect_failure_retry_delay = 60
    sql_user_name = "%{User-Name}"
    sql_set_password = ""
    authorize_check_query = "SELECT id, upper(mac) as UserName , 'User-Password' as Attribute, '' as Value, '==' as op \
	FROM nodes \
	WHERE upper(mac) = '%{SQL-User-Name}' and access=1 ORDER by id"
}

sql sql_last_online {
    driver = "rlm_sql_mysql"
    server = "localhost"
    login = "lms"
    password = "twojehaslo"
    radius_db = "lms"
    postauth_table = "nodes"
    deletestalesessions = yes
    sqltrace = no
    sqltracefile = ${logdir}/sqltrace.sql
    num_sql_socks = 15
    connect_failure_retry_delay = 60
    sql_user_name = "%{User-Name}"
    sql_set_password = ""
    postauth_query = "UPDATE nodes SET lastonline = unix_timestamp() WHERE name='%{User-Name}'"
}
