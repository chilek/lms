; $Id$
;
; Plik konfiguracyjny LMS-MGC - czyli magicznego generatora configów

; ---------------------------------------------------------------------------
; Ustawienia bazy danych
; ---------------------------------------------------------------------------

[database]

; Typ bazy danych. Aktualnie w 100% supportowany jest 'mysql', ale jak
; narazie nie widaæ wiêkszych problemów z 'postgres'. 
; Domy¶lnie: mysql

; type			= mysql

; Host gdzie zainstalowana jest baza danych. Najczê¶ciej, localhost, ale
; mo¿na tutaj wstawiæ cokolwiek (ipek, domena, path to socketa w formacie
; 'localhost:/path/to/socket').
; Domy¶lnie: localhost

; host			= localhost

; U¿ytkownik do bazy danych. W wielu wypadkach (je¿eli postêpowa³e¶ zgodnie
; ze wskazówkami w doc/INSTALL) bêdzie to 'lms'. Je¿eli chcesz u¿ywaæ
; konta uprzywilejowanego, prawdopodobnie wpiszesz 'root' (MySQL na
; wiêkszo¶ci *nixów), 'mysql' (na PLD) b±d¼ 'postgres' (PostgreSQL).
; Domy¶lnie: root

; user			= mysql

; Has³o do bazy danych. Domy¶lnie puste.
;
; password		= password

; Nazwa bazy danych, domy¶lnie lms.
;
; database		= lms

; ---------------------------------------------------------------------------
; W³a¶ciwa konfiguracja mgc. Przyk³adowy config z istniej±cej sieci mo¿ecie
; znale¼æ w pliku lms-mgc-netx.ini
; ---------------------------------------------------------------------------

[mgc]

; Lista "instancji" oddzielona spacjami.

; instaces	= dhcp firewall squid

; Teraz, ka¿da instancja ma swoj± nazwê i jej konfigruacjê tworzy siê
; umieszczaj±c sekcjê o nazwie [mgc:nazwa], czyli przyk³adowo:

; [mgc:mydaemon]

; Jak dzia³aj± instancje? Oki, ju¿ nawijam.

; UWAGA! WSZYSTKIE PRZYK£ADOWE OPCJE S¡ WYSSANE Z PALCA!!!

; Na pocz±tek definiujemy plik do którego ma byæ zapisany wynik naszych
; wypocin (je¿eli ta zmienna zmienna bêdzie nie ustawiona, instancja siê
; zakoñczy):

; outfile		= /etc/somefile 

; Mo¿na zrobiæ aby generowny plik by³ DO£¡CZONY do istniej±cego pliku:

; append		= 1

; Mo¿na równierz ustawiæ prawa dostêpu (domy¶lnie 600):

; outfile_perm		= 700

; A tak¿e w³a¶ciciela i grupê (NUMERYCZNIE! domy¶lnie 0.0):

; outfile_owner		= 0
; outfile_group		= 0

; Na pocz±tku do pliku wynikowego jest kopiowana zawarto¶æ pliku z
; nag³ówkiem (domy¶lnie nie ustawione):

; header_file		= /etc/lms/myservice_header

; Pó¼niej jeste generowany nag³ówek ze zmiennej header (domy¶lnie pusta):

; header		= option1 = bla\noption2 = blabla

; Jak zauwazyli¶cie, mo¿na u¿ywaæ znaku "\n" jako separatora linii. Oczywi¶cie
; koñcowe "\n" nie jest wymagane.

; Trzeba okre¶liæ tak¿e które sieci z bazy danych uwzglêdniamy w naszym 
; configu (domy¶lnie wszystkie, oddzielamy je spacjami):

; networks		= cust1-publ cust2-publ cust3-priv

; Teraz mgc pobiera kolejne sieci i wykonuje w kó³ko nastêpuj±ce czynno¶ci:
; 
; - generuje nag³ówek per sieæ (domy¶lnie puste):

; network_header	= network %ADDR/%MASK { # Config section for %NAME

; Je¿eli chcemy wygenerowaæ jakie¶ linijki uwzglêdniaj±ce sieci docelowe,
; definiujemy sieci docelowe (domy¶lnie wszystkie):

; dst_networks		= main coalloc

; Oraz podajemy co ma dla nich wgenerowaæ:

; dst_network_header	= \tallow to %DADDR/%DMASK;

; Jak widaæ, mgc akceptuje zmienne, a w przypadku sieci s± to:

; %NAME	- nazwa sieci du¿ymi znakami;
; %name - nazwa sieci ma³ymi znakami;
; %ID	- ID sieci w bazie;
; %ADDR - adres sieci;
; %MASK - maska sieci;
; %GATE - brama sieci;
; %DNS  - serwer DNS tej sieci;
; %DOMAIN - domena tej sieci;
; %WINS - adres serwera WINS dla tej sieci;
; %DHCPS - pierwszy adres DHCP tej sieci;
; %DHCPE - ostatni adres DHCP tej sieci;
;
; Mo¿na u¿yæ np. %DNAME (%dname) albo %DADDR jako parametry docelowej sieci
; w dst_network_header.
;
; Dodatkowo dostêpne s± (tak¿e w header i footer):
; %DATE	- data w formacie YYYYMMDD;
; %TIME - czas w formacie HHMM;
; %TIMES - czas w formacie HHMMSS;
; %UTIME - czas w formacie unix timestamp;

; %NAME %ID %ADDR %MASK %GATE %DNS %DOMAIN %WINS %DHCPS %DHCPE - dla obydwu (network_header i dst_network_header)
; %DNAME %DID %DADDR %DMASK %DGATE %DDNS %DDOMAIN %DWINS %DDHCPS %DDHCPE - dla dst_network_header
; %name -
; Oczywi¶cie dst_network_header zaakcpetuje tak¿e zmienne z network_header, oraz znaki "\n" (jako
; koniec linii) i \t (jako tabulator).

; Dodatkowo przez wziêciem siê za komputery w tej sieci, parsowana jest zmienna:

; network_body		= \tnodes {

; Teraz MGC we¼mie siê za generowanie regu³ dla poszczególnych adresów IP.

; Robi to w dosyæ specyficzny sposób. Tj. oblicza kolejny adres IP, i kolejno sprawdza:

; allnodes - je¿eli ustawiony, zostanie wygenerowana regu³ka dla ka¿dego kolejnego
;            adresu IP.
;
; allexistnodes - wszystkie istniej±ce hosty.

; ignore - lista adres/prefix lub adres/maska oddzielana spacjami dla których
; ma byæ ignorowane generowanie

; - czy adres jest dopuszczony do pracy w sieci (istnieje komputer o takiej nazwie
;   access ma na Y), je¿eli tak to renderuje string z regu³:

; grantednode_publ	= \t\tnode %NAME (%IP/%MAC) unique %ID;
; (lub grantednode_priv je¿eli adres znajduje siê wg. RFC klasie prywatnej,
; je¿eli regu³a nie istnieje adres te¿ idzie dalej by ewentualnie osi±gn±æ
; default);
;
; - je¿eli nie jest dopuszczony (komputer istnieje, ale access ma na N) to:
;
; deniednode_publ	= node %NAME (%IP/%MAC) unique %ID deny;
; (lub deniednode_priv je¿eli adres znajduje siê wg. RFC klasie prywatnej,
; je¿eli regu³a nie istnieje adres te¿ idzie dalej by ewentualnie osi±gn±æ
; default);
;
; - je¿eli zawiera siê w klasie DHCP:
;
; dhcpnode_publ		= node unknown (%IP) reject;
; (lub dhcpnode_priv...)
;
; - jest nie przypisany do ¿adnego komputera:
;
; freeip_publ		= node unknown (%IP) lock_as_unused;
; (lub freeip_priv...)
;
; - i na koniec regu³ka domy¶lna - UWAGA! ADRES NIE £APIE SIÊ NA REGU£Ê
; JE¯ELI JEST ONA NIE USTAWIONA!:
;
; default_publ		= node unknown (%IP) lock_as_intruder;
;
; Co do "nie ³apania" siê na regu³ki - je¿eli jaki¶ host istnieje w sieci,
; ale my nie ustawimy grantednode i deniednode, to ten host za³apie siê default,
; natomiast pozosta³e siê za³api± na freeip.
;
; Mo¿liwe zmienne (chyba ich znaczenia nie muszê t³umaczyæ:
;
; %IP, %ID, %MAC, %OWNER, %NAME, %name, %UPRATE, %DOWNRATE oraz:
; zmienne sieciowe poprzedzone liter± "N", np. "%NADDR/%NMASK".
; kolejne oktety (od lewej) adresu IP - %1 %2 %3 %4.
; %TID i %TVAL - id i warto¶æ taryfy

; Teraz mgc sparsuje pod k±tem sieci network_footer i zacznie od nowa dla
; nastêpnej sieci.

; Na koniec jeszcze string footer i footer_file, podobnie jak te od
; nag³ówków.

; Aha. No i jeszcze postexec :)

; post_exec	= killall -HUP mydaemon
