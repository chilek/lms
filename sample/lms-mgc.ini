; $Id$
;
; Plik konfiguracyjny LMS-MGC - czyli magicznego generatora configów

; ---------------------------------------------------------------------------
; Ustawienia bazy danych
; ---------------------------------------------------------------------------

[database]

; Typ bazy danych. Aktualnie w 100% supportowany jest 'mysql', ale jak
; narazie nie widać większych problemów z 'postgres'. 
; Domyślnie: mysql

; type			= mysql

; Host gdzie zainstalowana jest baza danych. Najczęściej, localhost, ale
; można tutaj wstawić cokolwiek (ipek, domena, path to socketa w formacie
; 'localhost:/path/to/socket').
; Domyślnie: localhost

; host			= localhost

; Użytkownik do bazy danych. W wielu wypadkach (jeżeli postępowałeś zgodnie
; ze wskazówkami w doc/INSTALL) będzie to 'lms'. Jeżeli chcesz używać
; konta uprzywilejowanego, prawdopodobnie wpiszesz 'root' (MySQL na
; większości *nixów), 'mysql' (na PLD) bądź 'postgres' (PostgreSQL).
; Domyślnie: root

; user			= mysql

; Hasło do bazy danych. Domyślnie puste.
;
; password		= password

; Nazwa bazy danych, domyślnie lms.
;
; database		= lms

; ---------------------------------------------------------------------------
; Właściwa konfiguracja mgc. Przykładowy config z istniejącej sieci możecie
; znaleźć w pliku lms-mgc-netx.ini
; ---------------------------------------------------------------------------

[mgc]

; Lista "instancji" oddzielona spacjami.

; instances	= dhcp firewall squid

; Teraz, każda instancja ma swoją nazwę i jej konfigruację tworzy się
; umieszczając sekcję o nazwie [mgc:nazwa], czyli przykładowo:

; [mgc:mydaemon]

; Jak działają instancje? Oki, już nawijam.

; UWAGA! WSZYSTKIE PRZYKŁADOWE OPCJE SĄ WYSSANE Z PALCA!!!

; Na początek definiujemy plik do którego ma być zapisany wynik naszych
; wypocin (jeżeli ta zmienna zmienna będzie nie ustawiona, instancja się
; zakończy):

; outfile		= /etc/somefile 

; Można zrobić aby generowny plik był DOŁĄCZONY do istniejącego pliku:

; append		= 1

; Można równierz ustawić prawa dostępu (domyślnie 600):

; outfile_perm		= 700

; A także właściciela i grupę (NUMERYCZNIE! domyślnie 0.0):

; outfile_owner		= 0
; outfile_group		= 0

; Na początku do pliku wynikowego jest kopiowana zawartość pliku z
; nagłówkiem (domyślnie nie ustawione):

; header_file		= /etc/lms/myservice_header

; Później jeste generowany nagłówek ze zmiennej header (domyślnie pusta):

; header		= option1 = bla\noption2 = blabla

; Jak zauwazyliście, można używać znaku "\n" jako separatora linii. Oczywiście
; końcowe "\n" nie jest wymagane.

; Trzeba określić także które sieci z bazy danych uwzględniamy w naszym 
; configu (domyślnie wszystkie, oddzielamy je spacjami):

; networks		= cust1-publ cust2-publ cust3-priv

; Teraz mgc pobiera kolejne sieci i wykonuje w kółko następujące czynności:
; 
; - generuje nagłówek per sieć (domyślnie puste):

; network_header	= network %ADDR/%MASK { # Config section for %NAME

; Jeżeli chcemy wygenerować jakieś linijki uwzględniające sieci docelowe,
; definiujemy sieci docelowe (domyślnie wszystkie):

; dst_networks		= main coalloc

; Oraz podajemy co ma dla nich wgenerować:

; dst_network_header	= \tallow to %DADDR/%DMASK;

; Jak widać, mgc akceptuje zmienne, a w przypadku sieci są to:

; %NAME	- nazwa sieci dużymi znakami;
; %name - nazwa sieci małymi znakami;
; %ID	- ID sieci w bazie;
; %ADDR - adres sieci;
; %MASK - maska sieci;
; %GATE - brama sieci;
; %DNS  - serwer DNS tej sieci;
; %DOMAIN - domena tej sieci;
; %WINS - adres serwera WINS dla tej sieci;
; %DHCPS - pierwszy adres DHCP tej sieci;
; %DHCPE - ostatni adres DHCP tej sieci;
;
; Można użyć np. %DNAME (%dname) albo %DADDR jako parametry docelowej sieci
; w dst_network_header.
;
; Dodatkowo dostępne są (także w header i footer):
; %DATE	- data w formacie YYYYMMDD;
; %TIME - czas w formacie HHMM;
; %TIMES - czas w formacie HHMMSS;
; %UTIME - czas w formacie unix timestamp;

; %NAME %ID %ADDR %MASK %IFACE %GATE %DNS %DOMAIN %WINS %DHCPS %DHCPE - dla obydwu (network_header i dst_network_header)
; %DNAME %DID %DADDR %DMASK %DIFACE %DGATE %DDNS %DDOMAIN %DWINS %DDHCPS %DDHCPE - dla dst_network_header
; %name -
; Oczywiście dst_network_header zaakcpetuje także zmienne z network_header, oraz znaki "\n" (jako
; koniec linii) i \t (jako tabulator).

; Dodatkowo przez wzięciem się za komputery w tej sieci, parsowana jest zmienna:

; network_body		= \tnodes {

; Teraz MGC weźmie się za generowanie reguł dla poszczególnych adresów IP.

; Robi to w dosyć specyficzny sposób. Tj. oblicza kolejny adres IP, i kolejno sprawdza:

; allnodes - jeżeli ustawiony, zostanie wygenerowana regułka dla każdego kolejnego
;            adresu IP.
;
; allexistnodes - wszystkie istniejące hosty.

; ignore - lista adres/prefix lub adres/maska oddzielana spacjami dla których
; ma być ignorowane generowanie

; - czy adres jest dopuszczony do pracy w sieci (istnieje komputer o takiej nazwie
;   access ma na Y), jeżeli tak to renderuje string z reguł:

; grantednode_publ	= \t\tnode %NAME (%IP/%MAC) unique %ID;
; (lub grantednode_priv jeżeli adres znajduje się wg. RFC klasie prywatnej,
; jeżeli reguła nie istnieje adres też idzie dalej by ewentualnie osiągnąć
; default);
;
; - jeżeli nie jest dopuszczony (komputer istnieje, ale access ma na N) to:
;
; deniednode_publ	= node %NAME (%IP/%MAC) unique %ID deny;
; (lub deniednode_priv jeżeli adres znajduje się wg. RFC klasie prywatnej,
; jeżeli reguła nie istnieje adres też idzie dalej by ewentualnie osiągnąć
; default);
;
; - jeżeli zawiera się w klasie DHCP:
;
; dhcpnode_publ		= node unknown (%IP) reject;
; (lub dhcpnode_priv...)
;
; - jest nie przypisany do żadnego komputera:
;
; freeip_publ		= node unknown (%IP) lock_as_unused;
; (lub freeip_priv...)
;
; - i na koniec regułka domyślna - UWAGA! ADRES NIE ŁAPIE SIĘ NA REGUŁĘ
; JEŻELI JEST ONA NIE USTAWIONA!:
;
; default_publ		= node unknown (%IP) lock_as_intruder;
;
; Co do "nie łapania" się na regułki - jeżeli jakiś host istnieje w sieci,
; ale my nie ustawimy grantednode i deniednode, to ten host załapie się default,
; natomiast pozostałe się załapią na freeip.
;
; Możliwe zmienne (chyba ich znaczenia nie muszę tłumaczyć:
;
; %IP, %ID, %MAC, %OWNER, %NAME, %name, %UPRATE, %DOWNRATE oraz:
; zmienne sieciowe poprzedzone literą "N", np. "%NADDR/%NMASK" czy też "%NIFACE".
; kolejne oktety (od lewej) adresu IP - %1 %2 %3 %4.

; Teraz mgc sparsuje pod kątem sieci network_footer i zacznie od nowa dla
; następnej sieci.

; Na koniec jeszcze string footer i footer_file, podobnie jak te od
; nagłówków.

; Aha. No i jeszcze postexec :)

; post_exec	= killall -HUP mydaemon

; Możemy także zrobić, żeby dana sekcja wywoływała tylko i wyłącznie inne
; sekcje:

; instances = dns2 dns3 dns7

; W taki sposób możemy porobić sobie aliasy do tego co chcemy przeładować.
; Jeżeli sekcja ma ustawione 'instances', to inne ustawienia zostaną
; zignorowane!
