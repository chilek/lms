#!/usr/bin/perl
#
# LMS version 1.3-cvs
#
#  (C) 2001-2004 LMS Developers
#
#  Please, see the doc/AUTHORS for more information about authors!
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License Version 2 as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#  USA.
#
#  $Id$

use strict;
use DBI;
use Config::IniFiles;
use Getopt::Long;
use vars qw($configfile $help $version $queue $debug);
use POSIX qw(strftime);
use File::Copy;
use MIME::Parser;
use Data::Dumper;

$ENV{'PATH'}='/sbin:/usr/sbin:/usr/local/sbin:/bin:/usr/bin:/usr/local/bin';

my $_version = '1.3-cvs';

my %options = (
	"--config-file|C=s"     =>      \$configfile,
	"--help|h"              =>      \$help,
	"--version|v"           =>      \$version,
	"--debug|d"             =>      \$debug,
	"--queue|q=s"		=>	\$queue
);

Getopt::Long::config("no_ignore_case");
GetOptions(%options);

if($help)
{
	print STDERR <<EOF;
lms-mgc, version $_version
(C) 2001-2004 LMS Developers

-C, --config-file=/etc/lms/lms.ini
		alternate config file (default: /etc/lms/lms.ini);
-h, --help	print this help and exit;
-v, --version	print version info and exit;
-d, --debug	print out debug information, do not log any messages into
		system;
-q, --queue	queue ID (it means, QUEUE ID, numeric! NOT NAME! also
		it's required to run!)
				
EOF
	exit 0;
}							

if($version)
{
	print STDERR <<EOF;
lms-mgc, version $_version
(C) 2001-2004 LMS Developers

EOF
	exit 0;
}

if(!$configfile)
{
	$configfile = "/etc/lms/lms.ini";
}

if(! -r $configfile)
{
	print STDERR "Fatal error: Unable to read configuration file $configfile, exiting.\n";
	exit 1;
}
		
my $ini = new Config::IniFiles -file => $configfile;

my $dbtype = $ini->val('database', 'type') || 'mysql';
my $dbhost = $ini->val('database', 'host') || 'localhost';
my $dbuser = $ini->val('database', 'user') || 'root';
my $dbpasswd = $ini->val('database', 'password') || '';
my $dbname = $ini->val('database', 'database') || 'lms';

my $parser = new MIME::Parser;

$parser->decode_headers(1);
$parser->extract_uuencode(1);
$parser->output_to_core(1);

my $entity = $parser->parse(\*STDIN);
my $headers = $entity->head;
my $mh_from = $headers->get('From');
my $mh_msgid = $headers->get('Message-ID');
my $mh_subject = $headers->get('Subject');
my $body;
my $mailbody;

if($entity->mime_type =~ m|multipart/|i) # if we deal with multipart message...
{
	#
	# At this moment, we are unable to parse multiparted messages,
	# ie, this with attachments
	#
#	$num_parts = $entity->parts;
#	for($i=0;$i<$num_parts;$i++)
#	{
#		$body = $entity->parts($i);	# this is MIME::Body object
#		print $body->as_string;		# this returns base64 encoded
#						# attachment, even if we see
#	}					# binary data in Dumper :-(
}
else
{
	$body = $entity->bodyhandle;
	$mailbody = $body->as_string;
}

print "From: $mh_from";

#my $dbase;
#
#if($dbtype eq "mysql")
#{
#	$dbase = DBI->connect("DBI:mysql:database=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
#}
#elsif($dbtype eq "postgres")
#{
#	$dbase = DBI->connect("DBI:Pg:dbname=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
#}
#else
#{
#	print STDERR "Fatal error: unsupported database type: $dbtype, exiting.\n";
#	exit 1;
#}
#
#$dbase->disconnect();

print Data::Dumper::Dumper $body;	# debug
$parser->filer->purge;			# cleanup
