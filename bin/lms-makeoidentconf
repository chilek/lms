#!/usr/bin/perl -Tw
#
# LMS version 1.0
#
#  (C) Copyright 2002 Rulez.PL Development Team
#  (C) Copyright 2001-2002 NetX ACN
#
#  Please, see the doc/AUTHORS for more information about authors!
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License Version 2 as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#  USA.
#
#  $Id$

use strict;
use DBI;
use Config::IniFiles;
use Getopt::Long;
use vars qw($configfile $quiet $help $version);

my $_version = '1.0-cvs';

my %options = (
	"--config-file|C=s"	=>	\$configfile,
	"--quiet|q"		=>	\$quiet,
	"--help|h"		=>	\$help,
	"--version|v"		=>	\$version
);

Getopt::Long::config("no_ignore_case");
GetOptions(%options);

if($help)
{
	print STDERR <<EOF;
lms-makeoidentconf, version $_version
(C) Copyright 2002 Rulez.PL Development Team
(C) Copyright 2001-2002 NetX ACN

-C, --config-file=/etc/lms/lms.ini	alternate config file (default: /etc/lms/lms.ini);
-h, --help			print this help and exit;
-v, --version			print version info and exit;
-q, --quiet			suppress any output, except errors;

EOF
	exit 0;
}

if($version)
{
	print STDERR <<EOF;
lms-makeoidentconf, version $_version
(C) Copyright 2002 Rulez.PL Development Team
(C) Copyright 2001-2002 NetX ACN

EOF
	exit 0;
}

if(!$configfile)
{
	$configfile = "/etc/lms/lms.ini";
}

if(!$quiet)
{
	print STDOUT "lms-makeoidentconf, version $_version\n";
	print STDOUT "(C) Copyright 2002 Rulez.PL Development Team\n";
	print STDOUT "(C) Copyright 2001-2002 NetX ACN\n";
	print STDOUT "Using file $configfile as config.\n";
}

if(! -r $configfile)
{
	print STDERR "Fatal error: Unable to read configuration file $configfile, exiting.\n";
	exit 1;
}

my $ini = new Config::IniFiles -file => $configfile;

my $cfile = $ini->val('oidentd', 'config_file') || '/etc/oidentd_masq.conf';
my $cuid = $ini->val('oidentd','config_owneruid') || 0;
my $cgid = $ini->val('oidentd','config_ownergid') || 0;
my $cperm = $ini->val('oidentd','config_permission') || '0600';
my $itempl = $ini->val('oidentd','ident_template') || 'm-%N';

my $dbtype = $ini->val('database', 'type') || 'mysql';
my $dbhost = $ini->val('database', 'host') || 'localhost';
my $dbuser = $ini->val('database', 'user') || 'root';
my $dbpasswd = $ini->val('database', 'password') || '';
my $dbname = $ini->val('database', 'database') || 'lms';

my $dbase;

if($dbtype eq "mysql")
{
	$dbase = DBI->connect("DBI:mysql:database=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
}
elsif($dbtype eq "postgres")
{
	$dbase = DBI->connect("DBI:Pg:dbname=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
}
else
{
	print STDERR "Fatal error: unsupported database type: $dbtype, exiting.\n";
	exit 1;
}

open(OIDENTDCONF, ">$cfile") or die("Fatal error: Unable to write $cfile, exiting.\n");

my $dbq = $dbase->prepare("SELECT id, name, ipaddr, ownerid FROM nodes");

$dbq->execute();

while (my $row = $dbq->fetchrow_hashref()) {
	print OIDENTDCONF "$row->{'ipaddr'}\t";
	my $ident = $itempl;
	$ident =~ s/\%N/$row->{'name'}/;
	$ident =~ s/\%I/$row->{'id'}/;
	$ident =~ s/\%O/$row->{'ownerid'}/;
	print OIDENTDCONF "$ident\tUNIX\n";
}

$dbase->disconnect();
close(OIDENTDCONF);
chown $cuid, $cgid, $cfile or print "Warning! Unable to set owner of $cfile to $cuid.$cgid.\n";
chmod oct($cperm), $cfile or print "Warning! Unable to set permission $cperm to $cfile.\n";
