#!/usr/bin/perl -Tw
#
# LMS version 1.5-cvs
#
#  (C) 2001-2005 LMS Developers
#
#  Please, see the doc/AUTHORS for more information about authors!
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License Version 2 as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#  USA.
#
#  $Id$

use strict;
use DBI;
use Config::IniFiles;
use Getopt::Long;
use vars qw($configfile $quiet $help $version $fakedate);
use POSIX qw(strftime);
use POSIX qw(mktime);
use Time::Local;

my $_version = '1.5-cvs';

my %options = (
	"--config-file|C=s"	=>	\$configfile,
	"--quiet|q"		=>	\$quiet,
	"--help|h"		=>	\$help,
	"--version|v"		=>	\$version,
	"--fakedate|f=s"	=>	\$fakedate,
);

Getopt::Long::config("no_ignore_case");
GetOptions(%options);

if($help)
{
	print STDERR <<EOF;
lms-payments, version $_version
(C) 2001-2005 LMS Developers

-C, --config-file=/etc/lms/lms.ini	alternate config file (default: /etc/lms/lms.ini);
-h, --help			print this help and exit;
-v, --version			print version info and exit;
-q, --quiet			suppress any output, except errors;
-f, --fakedate=YYYY/MM/DD	override system date

EOF
	exit 0;
}

if($version)
{
	print STDERR <<EOF;
lms-payments, version $_version
(C) 2001-2005 LMS Developers

EOF
	exit 0;
}

if(!$configfile)
{
	$configfile = "/etc/lms/lms.ini";
}

if(!$quiet)
{
	print STDOUT "lms-payments, version $_version\n";
	print STDOUT "(C) 2001-2005 LMS Developers\n";
	print STDOUT "Using file $configfile as config.\n";
}

if(! -r $configfile)
{
	print STDERR "Fatal error: Unable to read configuration file $configfile, exiting.\n";
	exit 1;
}

my $ini = new Config::IniFiles -file => $configfile;
print @Config::IniFiles::errors;

my $dbtype = $ini->val('database', 'type') || 'mysql';
my $dbhost = $ini->val('database', 'host') || 'localhost';
my $dbuser = $ini->val('database', 'user') || 'root';
my $dbpasswd = $ini->val('database', 'password') || '';
my $dbname = $ini->val('database', 'database') || 'lms';
my $deadline = $ini->val('payments', 'deadline') || '14';
my $paytype = $ini->val('payments', 'paytype') || 'PRZELEW';
my $comment = $ini->val('payments', 'comment') || 'Abonament wg taryfy %tariff za okres %period';
my $suspension_percentage = $ini->val('payments', 'suspension_percentage') || '0';
my $suspension_description = $ini->val('payments', 'suspension_description') || '';
my $monthly_num = $ini->val('invoices', 'monthly_numbering') || 0;

my $dbase;
my $utsfmt;

if($dbtype eq "mysql")
{
	$dbase = DBI->connect("DBI:mysql:database=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
	$utsfmt = "UNIX_TIMESTAMP()";
}
elsif($dbtype eq "postgres")
{
	$dbase = DBI->connect("DBI:Pg:dbname=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
	$utsfmt = "EXTRACT(EPOCH FROM CURRENT_TIMESTAMP(0))";
}
elsif($dbtype eq "sqlite")
{
	$dbase = DBI->connect("DBI:SQLite:dbname=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
	$utsfmt = "strftime('%s','now')";
}
else
{
	print STDERR "Fatal error: unsupported database type: $dbtype, exiting.\n";
	exit 1;
}

sub localtime2()
{
	if($fakedate)
	{
		my @fakedate = split(/\//, $fakedate);
		return localtime(timelocal(0,0,0,$fakedate[2],$fakedate[1]-1,$fakedate[0]));
	}
	else
	{
		return localtime();
	}
}

my $currtime = strftime("%s",localtime2());
my $month = sprintf("%d",strftime("%m",localtime2()));
my $day = strftime("%e",localtime2());
my $year = strftime("%Y",localtime2());
my $weekday = strftime("%u",localtime2());
my $yearday = strftime("%j",localtime2());
my $quarter;
if($month==1 || $month==4 || $month==7 || $month==10) {
	$quarter = $day;
} elsif ($month==2 || $month==5 || $month==8 || $month==11) {
	$quarter = $day + 100;
} else {
	$quarter = $day + 200;
}

my %txts;
$txts{0} = strftime("%Y/%m/%d", 0, 0, 12, $day, $month - 1, $year - 1900)." - ".strftime("%Y/%m/%d", 0, 0, 12, $day + 7, $month - 1, $year - 1900);
$txts{1} = strftime("%Y/%m/%d", 0, 0, 12, $day, $month - 1, $year - 1900)." - ".strftime("%Y/%m/%d", 0, 0, 12, $day - 1, $month, $year - 1900);
$txts{2} = strftime("%Y/%m/%d", 0, 0, 12, $day, $month - 1, $year - 1900)." - ".strftime("%Y/%m/%d", 0, 0, 12, $day - 1, $month + 2, $year - 1900);
$txts{3} = strftime("%Y/%m/%d", 0, 0, 12, $day, $month - 1, $year - 1900)." - ".strftime("%Y/%m/%d", 0, 0, 12, $day - 1, $month - 1, $year - 1900 + 1);

my $start = 0;
my $end = 0;

my $dbq = $dbase->prepare("SELECT value FROM uiconfig WHERE var = 'monthly_numbering' AND section = 'invoices'");
$dbq->execute();
if(my $row = $dbq->fetchrow_hashref())
{
	$monthly_num = $row->{'value'} || 0;
}

if($monthly_num)
{
	# monthly invoices numbering
	$start = strftime("%s", 0, 0, 0, 1, $month - 1, $year - 1900);
	$end = strftime("%s", 0, 0, 0, 1, $month, $year - 1900);
}
else
{
	# yearly invoices numbering
	$start = strftime("%s", 0, 0, 0, 1, 0, $year - 1900);
	$end = strftime("%s", 0, 0, 0, 1, 0, $year+1 - 1900);
}

$dbq = $dbase->prepare("SELECT MAX(number) AS number FROM invoices WHERE cdate >= $start AND cdate < $end");
$dbq->execute();
my $row = $dbq->fetchrow_hashref();
my $number = $row->{'number'} || 0;
my %gotinv;
my $icdbq;
my $cdbq;
my $suspended = 0;
my $itemid;

# let's go, query fetch *ALL* assignments in given day

$dbq = $dbase->prepare("SELECT assignments.id AS id, tariffid, userid, period, at, taxvalue, pkwiu, uprate, downrate, tariffs.name AS name, description, invoice,
	CASE suspended WHEN 0 THEN ROUND(CASE discount WHEN 0 THEN value ELSE value-value*discount/100 END, 2) ELSE
	ROUND(ROUND(CASE discount WHEN 0 THEN value ELSE value-value*discount/100 END, 2) * $suspension_percentage/100, 2) END AS value
	FROM assignments, tariffs, users
	WHERE tariffs.id = tariffid AND userid = users.id
	AND status = 3 AND deleted = 0 AND value > 0
	AND ((period = 0 AND at = $weekday) OR (period = 1 AND at = $day) OR (period = 2 AND at = $quarter) OR (period = 3 AND at = $yearday)) AND (datefrom <= $currtime OR datefrom = 0) AND (dateto > $currtime OR dateto = 0)
	ORDER BY userid, invoice, value DESC");
$dbq->execute();

while(my $assign = $dbq->fetchrow_hashref())
{
	my $uid = $assign->{'userid'};
	
	# check, if all customer liabilities are suspended
	if($suspended != $uid)
	{
		my $xdbq = $dbase->prepare("SELECT 1 FROM assignments, users WHERE userid = users.id AND tariffid = 0 AND (datefrom <= $currtime OR datefrom = 0) AND (dateto > $currtime OR dateto = 0) AND userid = $uid");
		$xdbq->execute();
		if(my $xrow = $xdbq->fetchrow_hashref())
		{
			$suspended = $uid;
			next;
		}
	} else {
		next;
	}

	my $period = $txts{$assign->{'period'}};
	my $desc = $comment;
	
	$desc =~ s/\%tariff/$assign->{'name'}/g;
	$desc =~ s/\%desc/$assign->{'description'}/g;
	$desc =~ s/\%period/$period/g;
	if ($suspension_percentage)
	{
		$desc .= " ".$suspension_description;
	}

	$gotinv{$uid} = 0 if not defined $gotinv{$uid};
	if($assign->{'value'} != 0)
	{
		if($assign->{'invoice'})
		{
			if($gotinv{$uid} eq 0)
			{
				$itemid = 0;
				$number++;
				my $udbq = $dbase->prepare("SELECT * FROM users WHERE id=$uid");
				$udbq->execute();
				my $urow = $udbq->fetchrow_hashref();
				my $idbq = $dbase->prepare("INSERT INTO invoices (number, customerid, name, address, zip, city, phone, nip, pesel, cdate, paytime, paytype, finished) VALUES ($number, $uid, '$urow->{'lastname'} $urow->{'name'}', '$urow->{'address'}', '$urow->{'zip'}', '$urow->{'city'}', '$urow->{'phone1'}', '$urow->{'nip'}', '$urow->{'pesel'}', $currtime, $deadline, '$paytype', 1)");
				$idbq->execute();
				$idbq = $dbase->prepare("SELECT id FROM invoices WHERE number=$number AND cdate=$currtime AND finished=1 AND customerid=$uid");
				$idbq->execute();
				my $irow = $idbq->fetchrow_hashref();
				$gotinv{$uid} = $irow->{'id'};
			}
			
			my $icdbq = $dbase->prepare("SELECT * FROM invoicecontents WHERE tariffid=$assign->{'tariffid'} AND invoiceid=$gotinv{$uid} AND description='$desc'");
			$icdbq->execute();
			
			if(my $icrow = $icdbq->fetchrow_hashref())
			{
				$itemid = $icrow->{'itemid'};
				
				$icdbq = $dbase->prepare("UPDATE invoicecontents SET count=count+1 WHERE tariffid=$assign->{'tariffid'} AND invoiceid=$gotinv{$uid} AND description='$desc'");
				$icdbq->execute();

				$cdbq = $dbase->prepare("UPDATE cash SET value = value+$assign->{'value'} WHERE invoiceid = $gotinv{$uid} AND itemid = $itemid AND type = 4");
			}
			else
			{
				$itemid++;

				if ($assign->{'taxvalue'})
				{
					$icdbq = $dbase->prepare("INSERT INTO invoicecontents (invoiceid, value, taxvalue, pkwiu, content, count, description, tariffid, itemid) VALUES ($gotinv{$uid}, $assign->{'value'}, $assign->{'taxvalue'}, '$assign->{'pkwiu'}', 'szt', 1, '$desc', $assign->{'tariffid'}, $itemid)");
				}
				else
				{
					$icdbq = $dbase->prepare("INSERT INTO invoicecontents (invoiceid, value, taxvalue, pkwiu, content, count, description, tariffid, itemid) VALUES ($gotinv{$uid}, $assign->{'value'}, NULL, '$assign->{'pkwiu'}', 'szt', 1, '$desc', $assign->{'tariffid'}, $itemid)");
				}
				$icdbq->execute();
				
				if ($assign->{'taxvalue'})
				{
					$cdbq = $dbase->prepare("INSERT INTO cash (time, adminid, type, value, taxvalue, userid, comment, invoiceid, itemid) VALUES ($currtime, 0, 4, $assign->{'value'}, $assign->{'taxvalue'}, $uid, '$desc', $gotinv{$uid}, $itemid)");
				}
				else
				{
					$cdbq = $dbase->prepare("INSERT INTO cash (time, adminid, type, value, taxvalue, userid, comment, invoiceid, itemid) VALUES ($currtime, 0, 4, $assign->{'value'}, NULL, $uid, '$desc', $gotinv{$uid}, $itemid)");
				}
			}
			
		}
		else
		{
			if ($assign->{'taxvalue'})
			{
				$cdbq = $dbase->prepare("INSERT INTO cash (time, adminid, type, value, taxvalue, userid, comment) VALUES ($currtime, 0, 4, $assign->{'value'}, $assign->{'taxvalue'}, $uid, '$desc')");
			}
			else
			{
				$cdbq = $dbase->prepare("INSERT INTO cash (time, adminid, type, value, taxvalue, userid, comment) VALUES ($currtime, 0, 4, $assign->{'value'}, NULL, $uid, '$desc')");
			}
		}

		$cdbq->execute();
		print STDERR "CID:$uid\tVAL:$assign->{'value'}\tDESC:$desc\n" if not $quiet;
	}
}	

# solid payments
$dbq = $dbase->prepare("SELECT * FROM payments WHERE value <> 0 AND ((period = 0 AND at=$weekday) OR (period = 1 AND at=$day) OR (period = 2 AND at = $quarter) OR (period = 3 AND at = $yearday))");
$dbq->execute();

while(my $assign = $dbq->fetchrow_hashref())
{
	my $sdbq = $dbase->prepare("INSERT INTO cash (time, adminid, type, value, userid, comment, invoiceid) VALUES ($currtime, 0, 2, $assign->{'value'}, 0, '$assign->{'name'}/$assign->{'creditor'}', 0)");
	$sdbq->execute();
	print STDERR "CID:0\tVAL:$assign->{'value'}\tDESC:$assign->{'name'}/$assign->{'creditor'}\n" if not $quiet;
}

$dbq = $dbase->prepare("DELETE FROM timestamps WHERE tablename = 'cash' OR tablename = '_global'");
$dbq->execute();
$dbq = $dbase->prepare("INSERT INTO timestamps (tablename,time) VALUES ('cash',$utsfmt)");
$dbq->execute();
$dbq = $dbase->prepare("INSERT INTO timestamps (tablename,time) VALUES ('_global',$utsfmt)");
$dbq->execute();
$dbq = $dbase->prepare("DELETE FROM assignments WHERE dateto < $utsfmt - 86400 * 30 AND dateto != 0");
$dbq->execute();
$dbase->disconnect();
