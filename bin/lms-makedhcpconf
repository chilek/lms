#!/usr/bin/perl -Tw
#
#  LMS version 1.11-git
#
#  Copyright (C) 2001-2012 LMS Developers
#
#  Please, see the doc/AUTHORS for more information about authors!
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License Version 2 as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#  USA.
#
#  $Id$

use strict;
use DBI;
use Config::IniFiles;
use Getopt::Long;
use vars qw($configfile $quiet $help $version);

sub mask2prefix($)
{
	my $mask = shift @_;
	my @tmp = split('\.',$mask,4);
	my $q = sprintf("%b%b%b%b",$tmp[0],$tmp[1],$tmp[2],$tmp[3]);
	$q =~ s/0*$//;
	if ($q =~ /0/) {
		print " You idiot. error in mask\n";
	}
	my $len = length($q) ;
	return $len;
}

sub matchip($$$)
{
	my ($ip,$net,$mask) = @_;
	my $prefix = mask2prefix($mask);
	my $bmask = 2**32 - 2**(32-$prefix);
	my @net = split('\.',$net,4);
	my $bnet = dotquad2u32($net);
	if(($bnet & $bmask)!= $bnet) {
		print "EEediot net &mask != net\n"; return 1==0
	}
	my $bip = dotquad2u32($ip);
	return (($bip&$bmask) == $bnet);
}

sub dotquad2u32($)
{
	my $dq = shift||'0.0.0.0';
	my @dq = split('\.',$dq,4);
	return ((($dq[0] << 8) + $dq[1] << 8) + $dq[2] << 8) + $dq[3];
}

sub u32todotquad($)
{
	my $p = shift @_;
	return sprintf "%d.%d.%d.%d", ($p>>24)&0xff,($p>>16)&0xff, ($p>>8)&0xff,$p&0xff;
}


my $_version = '1.11-cvs';

my %options = (
	"--config-file|C=s"	=>	\$configfile,
	"--quiet|q"		=>	\$quiet,
	"--help|h"		=>	\$help,
	"--version|v"		=>	\$version
);

Getopt::Long::config("no_ignore_case");
GetOptions(%options);

if($help)
{
	print STDERR <<EOF;
lms-makedhcpconf, version $_version
(C) 2001-2012 LMS Developers

-C, --config-file=/etc/lms/lms.ini	alternate config file (default: /etc/lms/lms.ini);
-h, --help			print this help and exit;
-v, --version			print version info and exit;
-q, --quiet			suppress any output, except errors;

EOF
	exit 0;
}

if($version)
{
	print STDERR <<EOF;
lms-makedhcpconf, version $_version
(C) 2001-2012 LMS Developers

EOF
	exit 0;
}

if(!$configfile)
{
	$configfile = "/etc/lms/lms.ini";
}

if(!$quiet)
{
	print STDOUT "lms-makedhcpconf, version $_version\n";
	print STDOUT "(C) Copyright 2001-2012 LMS Developers\n";
	print STDOUT "Using file $configfile as config.\n";
}

if(! -r $configfile)
{
	print STDERR "Fatal error: Unable to read configuration file $configfile, exiting.\n";
	exit 1;
}

my $ini = new Config::IniFiles -file => $configfile;
print @Config::IniFiles::errors;

my $networks_list = $ini->val('dhcp', 'networks') || '';
my $excluded_networks_list = $ini->val('dhcp', 'excluded_networks') || '';
my $customergroups_list = $ini->val('dhcp', 'customergroups') || '';
my $deflease = $ini->val('dhcp', 'default_lease_time') || '86400';
my $maxlease = $ini->val('dhcp', 'max_lease_time') || '86400';
my $cfile = $ini->val('dhcp', 'config_file') || '/etc/dhcpd.conf';
my $cuid = $ini->val('dhcp','config_owneruid') || 0;
my $cgid = $ini->val('dhcp','config_ownergid') || 0;
my $cperm = $ini->val('dhcp','config_permission') || '0600';
my $olddhcpd = $ini->val('dhcp','ignore_ddns') || '';
my $logfacility = $ini->val('dhcp','log_facility') || '';
my $authoritative = $ini->val('dhcp','authoritative') || '';

my $dbhost = $ini->val('database', 'host') || 'localhost';
my $dbuser = $ini->val('database', 'user') || 'root';
my $dbpasswd = $ini->val('database', 'password') || '';
my $dbname = $ini->val('database', 'database') || 'lms';
my $dbtype = $ini->val('database', 'type') || 'mysql';

my $dbase;

if($dbtype =~ /mysql/)
{
	$dbase = DBI->connect("DBI:mysql:database=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
}
elsif($dbtype eq "postgres")
{
	$dbase = DBI->connect("DBI:Pg:dbname=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
}
else
{
	print STDERR "Fatal error: unsupported database type: $dbtype, exiting.\n";
	exit 1;
}

open(DHCPDCONF, ">$cfile") or die("Fatal error: Unable to write $cfile, exiting.\n");

if(!$olddhcpd)
{
	print DHCPDCONF "ddns-update-style none;\n";
}

if($authoritative)
{
	print DHCPDCONF "authoritative;\n";
}

if($logfacility)
{
	print DHCPDCONF "log-facility ".$logfacility.";\n";
}

my $inicustomergroups = $customergroups_list;

if(!$customergroups_list)
{
	my $dbq = $dbase->prepare("SELECT name FROM customergroups");
	$dbq->execute();
	while (my $row = $dbq->fetchrow_hashref()) {
		$customergroups_list = "$customergroups_list $row->{'name'}";
	}
	$dbq->finish();
}

my @customergroups = split ' ',$customergroups_list;
my %customergrouplist;
my @used_ifaces;
my $last_iface = '';
my @if;

# No networks_list in lms.ini, we fill networks_list variable with all networks in database
if(!$networks_list)
{
	my $dbq = $dbase->prepare("SELECT name FROM networks ORDER BY interface,name");
	$dbq->execute();

	while (my $row = $dbq->fetchrow_hashref()) 
	{
		$networks_list = "$networks_list $row->{'name'}";
	}	
}

my @networks = split ' ',$networks_list;

# Check for excluded_networks_list in lms.ini, if it is empty, than get excluded networks from LMSUI.
# Case 1: excluded_networks_list in lms.ini
if($excluded_networks_list)
{
	my @excluded_networks = split ' ', $excluded_networks_list;

	foreach my $excluded_network (@excluded_networks)
	{
		@networks = grep(!/^$excluded_network$/, @networks);
	}
}
# Case 2: excluded_networks_list from LMSUI
else
{
	my $dbq = $dbase->prepare("SELECT name FROM networks WHERE disabled=1 ORDER BY interface,name");
	$dbq->execute();
	
	while (my $row = $dbq->fetchrow_hashref()) 
	{
		$excluded_networks_list = "$excluded_networks_list $row->{'name'}";
	}

	my @excluded_networks = split ' ', $excluded_networks_list;
	foreach my $excluded_network (@excluded_networks)
	{
		@networks = grep(!/^$excluded_network$/, @networks);
	}
}

my $dbq = $dbase->prepare("SELECT id, name FROM customergroups");
$dbq->execute();
while (my $row = $dbq->fetchrow_hashref())
{
	$customergrouplist{$row->{'name'}} = $row->{'id'};
}
$dbq->finish();

$dbq = $dbase->prepare("SELECT id, LOWER(name) AS name, interface, inet_ntoa(address) AS address, mask, gateway, dns, dns2, domain, wins, dhcpstart, dhcpend FROM networks ORDER BY interface,name");
$dbq->execute();
while (my $row = $dbq->fetchrow_hashref()) 
{
	if($networks_list)
	{
		my $i = 0;
		foreach my $net (@networks)
		{
			if(lc($net) eq $row->{'name'})
			{
				last;
			}
			$i++;
		}
		if($i == scalar(@networks))
		{
			next;
		}
	}
	
	my $key = $row->{'name'};
	my $ndeflease = $ini->val("dhcp:$key",'default_lease_time') || $deflease;
	my $nmaxlease = $ini->val("dhcp:$key",'max_lease_time') || $maxlease;

	$row->{'interface'} = $row->{'interface'} || '';

	if($row->{'interface'})
	{
		@if = split('\:',$row->{'interface'});
	}
	my $iface = $if[0] || '';
		
        if (!($last_iface eq $iface) && !($last_iface eq '') && !length($iface)==0)
        {
        	print DHCPDCONF "}\n\n";
        }
		
        if (!length($iface)==0)
        {
    		if (!($iface eq $last_iface))
                {
            		print DHCPDCONF "shared-network LMS-$iface {\n"; 
			$last_iface = $iface;
                }
	}

	print DHCPDCONF "\tsubnet $row->{'address'} netmask $row->{'mask'} { # Network: $key (ID:$row->{'id'})\n";
	print DHCPDCONF "\t\tdefault-lease-time $ndeflease;\n";
	print DHCPDCONF "\t\tmax-lease-time $nmaxlease;\n";

	if($row->{'dhcpstart'} && $row->{'dhcpend'})
	{
		print DHCPDCONF "\t\trange $row->{'dhcpstart'} $row->{'dhcpend'};\n";
	}
	if($row->{'mask'})
	{
		print DHCPDCONF "\t\toption subnet-mask $row->{'mask'};\n";
	}
	if($row->{'gateway'})
	{
		print DHCPDCONF "\t\toption routers $row->{'gateway'};\n";
	}
	if($row->{'dns'} && $row->{'dns2'})
	{
		print DHCPDCONF "\t\toption domain-name-servers $row->{'dns'}, $row->{'dns2'};\n";
	}
	elsif($row->{'dns'})
	{
		print DHCPDCONF "\t\toption domain-name-servers $row->{'dns'};\n";
	}
	elsif($row->{'dns2'})
	{
		print DHCPDCONF "\t\toption domain-name-servers $row->{'dns2'};\n";
	}
	if($row->{'domain'})
	{
		print DHCPDCONF "\t\toption domain-name \"$row->{'domain'}\";\n";
	}
	if($row->{'wins'})
	{
		print DHCPDCONF "\t\toption netbios-name-servers $row->{'wins'};\n";
	}

	print DHCPDCONF "\n";

	my $dbq2 = $dbase->prepare("SELECT id, name, ipaddr, mac, ownerid FROM vnodes ORDER BY ipaddr");
	$dbq2->execute();
	while (my $row2 = $dbq2->fetchrow_hashref())
	{
		$row2->{'ipaddr'} = u32todotquad($row2->{'ipaddr'});
		if(matchip($row2->{'ipaddr'},$row->{'address'},$row->{'mask'}))
		{
			my $customergroupscount;
			foreach my $key2 (@customergroups)
			{
				my $dbq3 = $dbase->prepare("SELECT count(customerid) as total FROM customerassignments WHERE customerid=$row2->{'ownerid'} AND customergroupid=".$customergrouplist{$key2});
				$dbq3->execute();
				my $srow = $dbq3->fetchrow_hashref();
				$dbq3->finish();
				if ($srow->{'total'} eq 1)
				{
					$customergroupscount++;
				}
			}
			if ($customergroupscount || !$inicustomergroups)
			{
				my $ipaddr = $row2->{'ipaddr'};
				my $ndomain = $ini->val("dhcp:$ipaddr",'domain') || '';
				my $ngateway = $ini->val("dhcp:$ipaddr",'gateway') || '';
				my $ndns = $ini->val("dhcp:$ipaddr",'dns') || '';
				my $nwins = $ini->val("dhcp:$ipaddr",'wins') || '';
				my @macs = split ',', $row2->{'mac'};
				my $idx = 0;
				foreach my $mac (@macs)
				{
					print DHCPDCONF "\t\thost $row2->{'name'}".($idx>0 ? "-$idx" : "")." { # ID: $row2->{'id'}\n";
					print DHCPDCONF "\t\t\thardware ethernet $mac;\n";
					print DHCPDCONF "\t\t\tfixed-address $row2->{'ipaddr'};\n";
					if($ndomain)
					{
						print DHCPDCONF "\t\t\toption domain-name \"$ndomain\";\n";
					}
					if($ngateway)
					{
						print DHCPDCONF "\t\t\toption routers $ngateway;\n";
					}
					if($ndns)
					{
						print DHCPDCONF "\t\t\toption domain-name-servers $ndns;\n";
					}
					if($nwins)
					{
						print DHCPDCONF "\t\t\toption netbios-name-servers $nwins;\n";
					}
					print DHCPDCONF "\t\t}\n";
					$idx++;
				}
			}
		}
	}
	print DHCPDCONF "\t}\n";
	$dbq2->finish();
}

if ($last_iface)
{
	print DHCPDCONF "}\n";
}

$dbq->finish();
close(DHCPDCONF);
$dbase->disconnect();
chown $cuid, $cgid, $cfile or print "Warning! Unable to set owner of $cfile to $cuid.$cgid.\n";
chmod oct($cperm), $cfile or print "Warning! Unable to set permission $cperm to $cfile.\n";
