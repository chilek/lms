#!/usr/bin/perl
#
# LMS version 1.7-cvs
#
#  (C) 2001-2005 LMS Developers
#
#  Please, see the doc/AUTHORS for more information about authors!
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License Version 2 as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#  USA.
#
#  $Id$

use strict;
use DBI;
use Config::IniFiles;
use Getopt::Long;
use vars qw($configfile $help $version $quiet $fakedate);
use POSIX qw(strftime);
use LWP::UserAgent;
use MIME::Entity;
use Time::Local;

my $_version = '1.7-cvs';

my %options = (
	"--config-file|C=s"     =>      \$configfile,
	"--quiet|q"     	=>      \$quiet,
	"--help|h"              =>      \$help,
	"--version|v"           =>      \$version,
	"--fakedate|f=s"	=>	\$fakedate,
);

Getopt::Long::config("no_ignore_case");
GetOptions(%options);

if($help)
{
	print STDERR <<EOF;
lms-sendinvoices, version $_version
(C) 2001-2005 LMS Developers

-C, --config-file=/etc/lms/lms.ini    alternate config file 
			    (default: /etc/lms/lms.ini);
-q, --quiet		    suppress any output, except errors;
-h, --help		    print this help and exit;
-v, --version		    print version info and exit;
-f, --fakedate=YYYY/MM/DD   override system date;

EOF
	exit 0;
}							

if($version)
{
	print STDERR <<EOF;
lms-sendinvoices, version $_version
(C) 2001-2005 LMS Developers

EOF
	exit 0;
}

if(!$configfile)
{
	$configfile = "/etc/lms/lms.ini";
}

if(! -r $configfile)
{
	print STDERR "Fatal error: Unable to read configuration file $configfile, exiting.\n";
	exit 1;
}

if(!$quiet)
{
	print STDOUT "lms-sendinvoices, version $_version\n";
	print STDOUT "(C) 2001-2005 LMS Developers\n";
	print STDOUT "Using file $configfile as config.\n";
}

my $ini = new Config::IniFiles -file => $configfile;
print @Config::IniFiles::errors;

my $dbtype = $ini->val('database', 'type') || 'mysql';
my $dbhost = $ini->val('database', 'host') || 'localhost';
my $dbuser = $ini->val('database', 'user') || 'root';
my $dbpasswd = $ini->val('database', 'password') || '';
my $dbname = $ini->val('database', 'database') || 'lms';

my $invoice_ntemplate = $ini->val('invoices', 'number_template') || '%N/LMS/%Y';
my $filetype = $ini->val('invoices', 'type') || '';

my $lms_url = $ini->val('sendinvoices', 'lms_url') || 'http://localhost/lms/';
my $lms_user = $ini->val('sendinvoices', 'lms_user') || '';
my $lms_password = $ini->val('sendinvoices', 'lms_password') || '';
my $debug_email = $ini->val('sendinvoices', 'debug_email') || '';
my $sender_name = $ini->val('sendinvoices', 'sender_name') || '';
my $sender_email = $ini->val('sendinvoices', 'sender_email') || '';
my $mail_subject = $ini->val('sendinvoices', 'mail_subject') || 'Invoice No. %invoice';
my $mail_body = $ini->val('sendinvoices', 'mail_body') || 'Attached file with Invoice No. %invoice';

if(!$sender_name)
{
	print STDERR "Fatal error: sender_name unset! Can't continue, exiting.\n";
	exit 1;
}

if(!$sender_email)
{
	print STDERR "Fatal error: sender_email unset! Can't continue, exiting.\n";
	exit 1;
}

my $dbase;
my $utsfmt;

if($dbtype eq "mysql")
{
	$dbase = DBI->connect("DBI:mysql:database=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
	$utsfmt = "UNIX_TIMESTAMP()";
}
elsif($dbtype eq "postgres")
{
	$dbase = DBI->connect("DBI:Pg:dbname=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
	$utsfmt = "EXTRACT(EPOCH FROM CURRENT_TIMESTAMP(0))";
}
elsif($dbtype eq "sqlite")
{
	$dbase = DBI->connect("DBI:SQLite:dbname=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
	$utsfmt = "strftime('%s','now')";	
}
else
{
	print STDERR "Fatal error: unsupported database type: $dbtype, exiting.\n";
	exit 1;
}

# get/set invoice file type
my $dbq = $dbase->prepare("SELECT value FROM uiconfig WHERE section='invoices' AND var='type' AND disabled=0");
$dbq->execute();
if(my $row = $dbq->fetchrow_hashref())
{
	$filetype = $row->{'value'};
}

my $fencoding = 'quoted-printable';
my $ftype = 'text/html';
my $fext = 'html';

if($filetype eq 'pdf')
{
	$ftype = 'application/octetstream';
	$fencoding = '';
	$fext = 'pdf';
}

$dbq = $dbase->prepare("SELECT value FROM uiconfig WHERE section='invoices' AND var='number_template' AND disabled=0");
$dbq->execute();
if(my $row = $dbq->fetchrow_hashref())
{
	$invoice_ntemplate = $row->{'value'};
}

sub localtime2()
{
	if($fakedate)
	{
		my @fakedate = split(/\//, $fakedate);
		return localtime(timelocal(0,0,0,$fakedate[2],$fakedate[1]-1,$fakedate[0]));
	}
	else
	{
		return localtime();
	}
}

my $month = sprintf("%d",strftime("%m",localtime2()));
my $day = strftime("%e",localtime2());
my $year = strftime("%Y",localtime2());
my $daystart = strftime("%s", 0, 0, 0, $day, $month - 1, $year - 1900);
my $dayend = strftime("%s", 59, 59, 23, $day, $month - 1, $year - 1900);

$dbq = $dbase->prepare('SELECT invoices.id AS id, number, cdate, email, invoices.name AS name, customerid FROM invoices LEFT JOIN customers ON customers.id = customerid WHERE deleted = 0 AND cdate >= '.$daystart.' AND cdate <= '.$dayend);
$dbq->execute();
while(my $row = $dbq->fetchrow_hashref())
{
	my $invoice_number = $invoice_ntemplate;
	$invoice_number =~ s/\%N/$row->{'number'}/g;
	$invoice_number =~ s/\%Y/$year/g;
	$invoice_number =~ s/\%M/$month/g;

	if($row->{'email'})
	{
		my $ua = LWP::UserAgent->new;
		$ua->timeout(10);
		my $response = $ua->get($lms_url.'/?m=invoice&fetchsingle=1&override=1&id='.$row->{'id'}.'&loginform[login]='.$lms_user.'&loginform[pwd]='.$lms_password);
		if ($response->is_success)
		{
			my $custemail = $debug_email || $row->{'email'};
			
			if(!$quiet)
			{
				print "Invoice No. $invoice_number for $row->{'name'} <$custemail>\n";
			}
			
			$mail_body =~ s/%invoice/$invoice_number/g;
			$mail_subject =~ s/%invoice/$invoice_number/g;
			
			my $mail = build MIME::Entity Type=>"multipart/mixed";
			$mail->head->add('To', '"'.$row->{'name'}.'"'.' <'.$custemail.'>');
			$mail->head->add('From', '"'.$sender_name.'"'.' <'.$sender_email.'>');
			$mail->head->add('Reply-To', '"'.$sender_name.'"'.' <'.$sender_email.'>');
			$mail->head->add('Subject', $mail_subject);
			$mail->head->add('Message-ID', '<lms.sendinvoice.'.$row->{'id'}.'.'.$row->{'customerid'}.'@lms>');
			$mail->head->add('Return-path', '<'.$sender_email.'>');
			$mail->attach(
				Type => 'text/plain',
				Charset => 'UTF-8',
				Encoding => 'quoted-printable',
				Data => [ "$mail_body\n" ],
			);
			$mail->attach(
				Type => $ftype,
				Charset => 'UTF-8',
				Encoding => $fencoding,
				Filename => 'invoice_'.$row->{'id'}.'.'.$fext,
				Data => [ $response->content ],
			);
			$mail->smtpsend('MailFrom' => $sender_email, 'To' => $custemail, 'Return-path' => $sender_email);
			
		}
		else
		{
			die $response->status_line;
		}
	}
}
$dbq->finish();
$dbase->disconnect();
