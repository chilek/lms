#! /bin/sh

# Initialize default variables
prefix="/usr/local"
incdir="/usr/include"
libdir="/usr/lib"
with_mysql=yes

# Create config.status file
echo "#!/bin/sh" > config.status
echo "" >> config.status
echo "./configure \\" >> config.status

# Parse options *****************************************************************
ac_prev=
for ac_option
do

  case "$ac_option" in
    	-*=*)
		ac_optarg=`echo "$ac_option" | sed 's/[-_a-zA-Z0-9]*=//'`
    	;;
    	*) 
		ac_optarg=
    	;;
  esac

  case "$ac_option" in
	
	-disable-* | --disable-*)
		ac_feature=`echo $ac_option|sed -e 's/-*disable-//'`
		# Reject names that are not valid shell variable names.
		if test -n "`echo $ac_feature| sed 's/[-a-zA-Z0-9_]//g'`"; then
			{ echo "configure: error: $ac_feature: invalid feature name" 1>&2; exit 1; }
		fi
		ac_feature=`echo $ac_feature| sed 's/-/_/g'`
		eval "enable_${ac_feature}=no"
	;;
	-enable-* | --enable-*)
		ac_feature=`echo $ac_option|sed -e 's/-*enable-//' -e 's/=.*//'`
		# Reject names that are not valid shell variable names.
		if test -n "`echo $ac_feature| sed 's/[-_a-zA-Z0-9]//g'`"; then
			{ echo "configure: error: $ac_feature: invalid feature name" 1>&2; exit 1; }
		fi
		ac_feature=`echo $ac_feature| sed 's/-/_/g'`
		case "$ac_option" in
			*=*) ;;
			*) ac_optarg=yes ;;
		esac
		eval "enable_${ac_feature}='$ac_optarg'"
	;;
	-prefix=* | --prefix=* )
		prefix="$ac_optarg"
	;;
	-with-* | --with-*)
		ac_package=`echo $ac_option|sed -e 's/-*with-//' -e 's/=.*//'`
		# Reject names that are not valid shell variable names.
		if test -n "`echo $ac_package| sed 's/[-_a-zA-Z0-9]//g'`"; then
			{ echo "configure: error: $ac_package: invalid package name" 1>&2; exit 1; }
		fi
		ac_package=`echo $ac_package| sed 's/-/_/g'`
		case "$ac_option" in
			*=*) ;;
			*) ac_optarg=yes ;;
		esac
		eval "with_${ac_package}='$ac_optarg'"
	;;
	-lib=* | --lib=* | -libdir=* | --libdir=* )
		libdir="$ac_optarg"
	;;
	-inc=* | --inc=* | -incdir=* | --incdir=* )
		incdir="$ac_optarg"
	;;
	-ini=* | -ini=* | -inifile=* | --inifile=* )
		inifile="$ac_optarg"
	;;
	-help | --help )
    		# Omit some internal or obsolete options to make the list less imposing.
    		# This message is too long to be a string in the A/UX 3.1 sh.
    		cat << EOF
Usage: ./configure [options]
Options: [defaults in brackets after descriptions]
  --help		print this message
  --enable-debug0	SQL query logging (disabled)
  --enable-debug1	events logging (disabled)
  --with-pgsql		enables use of PostgreSQL database (disabled)
  --with-mysql		enables use of MySQL database (enabled)
  --with-sqlite		enables use of SQLite database (disabled)
  --prefix=PREFIX	sets program and modules install location
			(/usr/local), modules goes to PREFIX/lms/lib and main
			program to PREFIX/lms/bin
  --libdir=DIR		sets location of database library (/usr/lib)
  --incdir=DIR		sets location of database include files (/usr/include)
  --inifile=FILE        configuration file - disables online configuration
EOF
    		exit 0
	;;
	*)
		{ echo "configure error: '$ac_option' invalid option; use --help to show usage" 1>&2; exit 1; }
    	;;
  esac
  
  echo "\"$ac_option\" \\" >> config.status
done

chmod a+x config.status
#***************************************************************************************************

LIBS=
LDFLAGS=
CFLAGS=
FLAGS=

# Set up database
echo -n "Database type..." 
if test "${with_pgsql+set}" = set
then
	LIBS="-lpq -ldl"
	FLAGS="-DUSE_PGSQL"
	DBDRIVER=pgsql
	echo " PostgreSQL"
elif test "${with_sqlite+set}" = set
then
	LIBS="-lsqlite -ldl -lm"
	FLAGS="-DUSE_SQLITE"
	DBDRIVER=sqlite
	echo " SQLite"
else
	LIBS="-lmysqlclient -ldl"
	FLAGS="-DUSE_MYSQL"
	DBDRIVER=mysql
	echo " MySQL"
fi


# Set up lib/includes location
echo -n "Library location..."
LDFLAGS="-L$libdir"
echo " $libdir"

echo -n "Includes location..."
CFLAGS="-I$incdir"
echo " $incdir"

# Set up debug level
echo -n "SQL queries debugging..."
if test "${enable_debug0+set}" = set
then
	FLAGS="$FLAGS -DDEBUG0"
	echo " yes"
else 
	echo " no"
fi

echo -n "Events debugging..."
if test "${enable_debug1+set}" = set
then
	FLAGS="$FLAGS -DDEBUG1"
	echo " yes"
else
	echo " no"
fi

echo -n "Configuration file..."
if test "${inifile+set}" = set
then
	FLAGS="$FLAGS -DCONFIGFILE=\\\"$inifile\\\""
	echo " $inifile"
else
	echo " no"
fi

# Set install directories
echo -n "Daemon install directory..."
start=`pwd`
cd $prefix
if [ $? -eq 1 ] # exit if directory not exists 
then 
    exit 0 
fi
prefix=`pwd`
cd $start
LMS_BIN_DIR="$prefix/lms/bin"
echo " $LMS_BIN_DIR"

echo -n "Modules install directory..."
start=`pwd`
cd $prefix
if [ $? -eq 1 ] # exit if directory not exists 
then 
    exit 0 
fi
prefix=`pwd`
cd $start
LMS_LIB_DIR="$prefix/lms/lib"
echo " $LMS_LIB_DIR"

# Create makefiles
echo -n "Create Makefile for main program..."
echo "
INSTALLDIR = $LMS_BIN_DIR
MODULESDIR = $LMS_LIB_DIR
LIBS = $LIBS
LDFLAGS = $LDFLAGS
CFLAGS = $CFLAGS $FLAGS -Wall -O2 -DLMS_LIB_DIR=\\\"\$(MODULESDIR)\\\"
DBDRIVER = $DBDRIVER
" > Makefile \
&& cat Makefile.in >> Makefile
echo " done"

# Make modules Makefile's

cd ./modules
for x in `ls | grep -v CVS`
do
    if [ -d ./${x} ]
    then
	if [ -e ./${x}/Makefile.in ]
	then
	    echo -n "Create Makefile for mod_${x}..."
	    echo "
MODULESDIR = $LMS_LIB_DIR
LIBS = $LIBS 
CFLAGS = $CFLAGS $FLAGS -I../.. -Wall -O2
LDFLAGS = $LDFLAGS
" > ./${x}/Makefile && cat ./${x}/Makefile.in >> ./${x}/Makefile
	    echo " done"
	fi
    fi
done 
echo "***************************************************************"
echo "Configuration finished. Now You can type 'make && make install'"
